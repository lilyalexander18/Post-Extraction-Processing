{smcl}
{com}{sf}{ul off}{txt}
{com}. 
. 
. * ----------------------------
. * load/install packages
. * ----------------------------
. 
. /* 
> If needed, install necessary packages to compile notebook document (e.g., html, docx, pdf)
> these packages include: markdoc, kethcup, weaver, synlight, and statax
> note: if get any error messages, follow on-screen instructions in Stata console to 
> complete correct installation
> 
> * once install following packages once, do not need to re-install; 
> * here, commented out
> */
. *packages for MarkDoc
. *ssc install Markdoc
. *ssc install weaver
. *ssc install synlight
. *ssc install statax
. *markdocpandoc // installs pandoc
. *packages for analysis and presentation of results
. *ssc install estout, replace
. *ssc install outreg
. *ssc install pandoc
. *ssc install coefplot 
. 
. *-----------------------
. *-----------------------
. 
. 
. /* Template: 
> MI 20170122: 
> comments from Stata do-file will not appear in final markdoc.
> The text included in this do-file will only appear if it
> is blocked between a forward slash '/' and 3 asterisks '***', as done below
> immediately before start of latex syntax.
> */
.         
. 
. /***
> 
> \documentclass{c -(}article{c )-}
> 
> \usepackage{c -(}graphicx{c )-}  % this is a package for inserting graphics
> \usepackage{c -(}hyperref{c )-}
> \hypersetup{c -(}
>     colorlinks=true,
>     linkcolor=blue,
>     filecolor=blue,      
>     urlcolor=blue
>         {c )-}
>         
> \usepackage{c -(}geometry{c )-}   % useful package for formatting document
> \geometry{c -(}
>         letterpaper,
>         total={c -(}6.5in, 9in{c )-},
>         left=1in,
>         right=1in,
>         top=1in,
>         bottom=1in
>         {c )-}
> 
> \begin{c -(}document{c )-}
> 
> \title{c -(}Data Validation Exercise before Entry into UCSR{c )-}
> \author{c -(}
>   Lily Alexander
>   {c )-}
> 
>  \date{c -(}
>   \bigskip
>   \today
>   {c )-}
> 
> \maketitle
>         
> \begin{c -(}abstract{c )-}
> \textbf{c -(}Summary{c )-}. This is a document to validate and check variables before they are integrated into the UCSR.
> \end{c -(}abstract{c )-}
> 
> \section{c -(}High-level codebook for all variables{c )-}
> 
> \begin{c -(}verbatim{c )-}
> ***/
. 
. /* ------------------------
> load dataset
> ---------------------------
> */
. 
. /**/ use HCT_clean_wide_file_Mar2018.dta, clear 
{txt}
{com}. 
. 
. /* ------------------------
> codebook generation
> ---------------------------
> */
. /**/ codebook 

{txt}{hline}
{res}disease{right:Disease}
{txt}{hline}

{col 19}type:  string ({res}str3{txt})

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"HIV"

{txt}{hline}
{res}collapsed{right:Collapsed}
{txt}{hline}

{col 19}type:  string ({res}str3{txt}), but longest is str2

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"No"

{txt}{hline}
{res}lead_author{right:Lead Author}
{txt}{hline}

{col 19}type:  string ({res}str21{txt})

{col 10}unique values:  {res}25{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Chang, W"
{col 26}"Maheswaran, H"
{col 26}"Nguyen, VT"
{col 26}"Obure, CD"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}ref_year{right:Reference Year}
{txt}{hline}

{col 19}type:  numeric ({res}int{txt})

{col 18}range:  [{res}1997{txt},{res}2016{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}12{col 51}{txt}missing .:  {res}0{txt}/{res}163

{txt}{col 19}mean:{res}{col 26}    2012
{txt}{col 15}std. dev:{res}{col 26} 3.95967

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    2007{col 37}    2010{col 47}    2012{col 57}    2016{col 67}    2016

{txt}{hline}
{res}output_unit2{right:Output unit}
{txt}{hline}

{col 19}type:  string ({res}str20{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       150{col 33}"."
{col 21}         1{col 33}"Cost Per Person Year"
{col 21}         4{col 33}"Patient Visit"
{col 21}         8{col 33}"Per Visit"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}title{right:Title}
{txt}{hline}

{col 19}type:  string ({res}str167{txt})

{col 10}unique values:  {res}25{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Cost and quality of life analysis of HIV
{col 26}self-testing and facility-based HIV testing and
{col 26}counselling in Blantyre, Malawi "
{col 26}"Expenditure Analysis of HIV Testing and Counseling
{col 26}Services Using the Cascade Framework in Vietnam"
{col 26}"Optimising the cost and delivery of HIV counselling
{col 26}and testing services in Kenya and Swaziland"
{col 26}"Optimising the cost and delivery of HIV counselling
{col 26}and testing services in Kenya and Swaziland"

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}journal_etc{right:Journal}
{txt}{hline}

{col 19}type:  string ({res}str57{txt})

{col 10}unique values:  {res}25{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"BMC Med. 2016 Feb 19;14:34"
{col 26}"J Acquir Immune Defic Syndr. 2010 Jul;54(3):317-23"
{col 26}"Rural Remote Health. 2015 Oct-Dec;15(4):3357"
{col 26}"Sex Transm Infect. 2012 Nov; 88(7): 498–503"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}url{right:URL}
{txt}{hline}

{col 19}type:  string ({res}str91{txt})

{col 10}unique values:  {res}25{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"<https://www.ncbi.nlm.nih.gov/pmc/articles/PMC359549
{col 26}8/>."
{col 26}"<https://www.ncbi.nlm.nih.gov/pmc/articles/PMC505152
{col 26}8/>."
{col 26}"<https://www.ncbi.nlm.nih.gov/pubmed/20453819>."
{col 26}"<https://www.ncbi.nlm.nih.gov/pubmed/26572854>."

{txt}{hline}
{res}iso_name{right:Country}
{txt}{hline}

{col 19}type:  string ({res}str14{txt})

{col 10}unique values:  {res}16{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Kenya "
{col 26}"Malawi "
{col 26}"South Africa"
{col 26}"Swaziland "

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}location{right:Location}
{txt}{hline}

{col 19}type:  string ({res}str107{txt})

{col 10}unique values:  {res}27{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}"."
{col 26}"Blantyre"
{col 26}"KwaZulu Natal province"

{txt}{col 16}warning:  variable has leading, embedded, and trailing blanks

{txt}{hline}
{res}no_sites{right:Sites}
{txt}{hline}

{col 19}type:  string ({res}str5{txt})

{col 10}unique values:  {res}19{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"1"
{col 26}"1"
{col 26}"34"
{col 26}"56"

{txt}{hline}
{res}pop_density{right:Urbanicity}
{txt}{hline}

{col 19}type:  string ({res}str7{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        86{col 33}"Mixture"
{col 21}        36{col 33}"Rural"
{col 21}        41{col 33}"Urban"

{txt}{hline}
{res}ownership{right:Ownership}
{txt}{hline}

{col 19}type:  string ({res}str17{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         8{col 33}"In-Country Ngo"
{col 21}        16{col 33}"International Ngo"
{col 21}       115{col 33}"Mixed"
{col 21}        24{col 33}"Public"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}platform{right:Platform}
{txt}{hline}

{col 19}type:  string ({res}str15{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        15{col 33}"."
{col 21}         4{col 33}"Community Based"
{col 21}       119{col 33}"Fixed Facility"
{col 21}        25{col 33}"Outreach"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}facility_cat{right:Platform specificity}
{txt}{hline}

{col 19}type:  string ({res}str68{txt})

{col 10}unique values:  {res}14{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Clinic At Hospital (Intervention- Or
{col 26}Disease-Specific)"
{col 26}"Health Center (E.G. Community Health Clinic -
{col 26}Sometimes W/ 1-2 Beds)"
{col 26}"Hospital - Primary (District)"
{col 26}"Mix Of Health Care Facility Types"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}id_class{right:Intervention Category}
{txt}{hline}

{col 19}type:  string ({res}str7{txt})

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"Testing"

{txt}{hline}
{res}id_int{right:Intervention}
{txt}{hline}

{col 19}type:  string ({res}str26{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       159{col 33}"HCT"
{col 21}         4{col 33}"HIV COUNSELING AND TESTING"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}int_description_long{right:Intervention Description (Long)}
{txt}{hline}

{col 19}type:  string ({res}strL{txt})

{col 10}unique values:  {res}40{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"At the 17 VCTCs studied in Andhra Pradesh, 36 272
{col 26}persons received HIV pre-test counselling during the
{col 26}2002– 03 fiscal year, of whom 35 844 (98.8%)
{col 26}underwent an HIV test. Of the persons tested, 32 413
{col 26}(90.4%) received post-test counselling. HIV infection
{col 26}was detected in 6866 (19.2%) of the persons tested,
{col 26}of whom 6638 (96.7%) received post-test counselling.
{col 26}The number of persons receiving post-test counselling
{col 26}at each VCTC in the 2002–03 fiscal year varied widely
{col 26}from 334 to 7802 (median 979), and the percentage of
{col 26}HIV-positive persons also varied widely between VCTCs
{col 26}from 5.4% to 52.6% (median 22%). The overall
{col 26}HIV-positivity rate in post-test counselled clients
{col 26}was 20.5%.
All VCTCs used a similar testing protocol
{col 26}and fee structure. HIV testing was done with rapid
{col 26}test kits. If the first test was positive, two more
{col 26}types of rapid tests were performed to confirm the
{col 26}positive result. The result was certified by the
{col 26}medical officer at the VCTC and handed over to the
{col 26}client usually on the day after pre- test counselling
{col 26}and blood sample collection. The fee charged for the
{col 26}HIV test was a nominal Rs 10 (US$ 0.21). This fee was
{col 26}waived if the medical officer assessed the client to
{col 26}be very poor and unable to afford this, which was
{col 26}done for 0%–45% of clients in various VCTCs."
{col 26}"In a typical site, clients passed through several
{col 26}SDPs, namely the Heart 2 Heart centre (HTC
{col 26}unit)—which is the entry point in the ART program,
{col 26}the antenatal clinic—which is the entry point for
{col 26}HIV-positive pregnant women, the ART patient
{col 26}monitoring and management unit, the ART clinic, the
{col 26}ART laboratory, the ART pharmacy, and the ART
{col 26}adherence counseling."
{col 26}"The study area included three high-density urban
{col 26}sub- urbs of Blantyre, Malawi with an adult
{col 26}population of approximately 34,000 residents and
{col 26}adult HIV prevalence of 18 % . Twenty-eight clusters
{col 26}of approximately 1,200 adults were randomised to
{col 26}either HIVST or standard-of- care (control). In all
{col 26}clusters, participants could access HTC at the health
{col 26}facilities by self-presenting or after referral by
{col 26}medical personnel. In the 14 intervention HIVST
{col 26}clusters, resident volunteer counsellors promoted
{col 26}HIVST and provided pre- and post-test counselling, as
{col 26}well as directions on how to use the self-test kits.
{col 26}Participants could self-test in the privacy of their
{col 26}own homes. Routine and confirmatory HIV testing and
{col 26}care ser- vices were available at Queen Elizabeth
{col 26}Central Hospital (QECH), and two primary health
{col 26}clinics located in the study area (Ndirande Health
{col 26}Centre, Chilomoni Health Centre). HIVST was provided
{col 26}for a two-year period, with the service introduced
{col 26}from February to May 2012. From the onset of
{col 26}intervention in seven HIVST clusters, and from
{col 26}January 2013 in all HIVST clusters, participants
{col 26}could also request home-based assessment and
{col 26}initiation of 14 days of HIV care, including ART if
{col 26}eligible . Subsequent care was provided at the
{col 26}primary care level"
{col 26}"VCT refers to the client-initiated counselling and
{col 26}testing for HIV through VCT centres, while PITC
{col 26}involves the incorporation of HCT into routine
{col 26}healthcare, including general primary care, maternal
{col 26}and child healthcare, care for sexually transmitted
{col 26}infections and inpatient services. Both VCT and PITC
{col 26}services are offered in Kenya and Swaziland, and
{col 26}follow similar testing procedures in both
{col 26}countries.
There are, however, several differences
{col 26}between the PITC and VCT models, which have
{col 26}associated resource implications. While PITC services
{col 26}are routinely offered to all clients attending
{col 26}services, regardless of their reason for accessing
{col 26}services, VCT is dependent upon clients seeking
{col 26}testing. Within VCT, counselling and testing is
{col 26}provided by a lay VCT counsellor or a nurse. For
{col 26}PITC, pre- and post-test counselling is provided by a
{col 26}nurse, and testing is conducted either by the same
{col 26}nurse or provided by a laboratory technologist or a
{col 26}lay counsellor. VCT generally involves one-on-one or
{col 26}couples counselling, while for PITC pre- test
{col 26}counselling may be provided to groups. PITC may also
{col 26}involve much less post-test counselling than VCT, and
{col 26}thus, requires a shorter length of staff time for
{col 26}each visit."

{txt}{col 16}warning:  variable has leading, embedded, and trailing blanks

{txt}{hline}
{res}clinical_monitoring{right:Clinical monitoring}
{txt}{hline}

{col 19}type:  string ({res}str3{txt}), but longest is str1

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}demand_generation{right:Demand generation}
{txt}{hline}

{col 19}type:  string ({res}str154{txt})

{col 10}unique values:  {res}10{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}"."
{col 26}"."
{col 26}"."

{txt}{col 16}warning:  variable has leading, embedded, and trailing blanks

{txt}{hline}
{res}counseling_content{right:Counseling content}
{txt}{hline}

{col 19}type:  string ({res}str201{txt})

{col 10}unique values:  {res}13{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Counseling Provided - Content Nr"
{col 26}"Pre-Test Counseling, Post-Test Counseling"
{col 26}"Pre-Test Counseling, Post-Test Counseling"
{col 26}"Pre-Test Counseling, Post-Test Counseling"

{txt}{col 16}warning:  variable has leading and embedded blanks

{txt}{hline}
{res}staff_type{right:Staff type & number}
{txt}{hline}

{col 19}type:  string ({res}str205{txt})

{col 10}unique values:  {res}21{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Counselor (Nr)"
{col 26}"Doctors (Nr), Nurses (Nr), Clinical Officer (Nr),
{col 26}Counselor (Nr), Social Workers (Nr), Community Health
{col 26}Workers (Nr), Peer Educators (Nr), Laboratory
{col 26}Technicians (Nr), Pharmacists (Nr), And Volunteers
{col 26}(Nr)"
{col 26}"Nurses (Nr),  Laboratory Technologist (Nr), Lay
{col 26}Counselor (Nr)"
{col 26}"Physician (65), Nurse (76)"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}supportive_care{right:Supportive care}
{txt}{hline}

{col 19}type:  string ({res}str85{txt})

{col 10}unique values:  {res}5{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       150{col 33}"."
{col 21}         2{col 33}"1/3Yrs"
{col 21}         2{col 33}"Bp Monitoring, Rapid Testing For Blood
{col 33}Glucose , Cholesterol Levels,
Hemoglobin
{col 33}Level"
{col 21}         4{col 33}"Feeding Plan, Care For Aids Orphans,
{col 33}Wellness Management Services, Stis
{col 33}Treatment"
{col 21}         5{col 33}"Oi Treatment"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}visits{right:Visit type & number}
{txt}{hline}

{col 19}type:  string ({res}str44{txt})

{col 10}unique values:  {res}9{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       117{col 33}"."
{col 21}         5{col 33}"2"
{col 21}         1{col 33}"4983 Total Annual Visits By All
{col 33}Patients"
{col 21}         1{col 33}"5296 Total Annual Visits By All
{col 33}Patients"
{col 21}         1{col 33}"7 Total Annual Visits By All Patients"
{col 21}         1{col 33}"746 Total Annual Visits By All
{col 33}Patients"
{col 21}        30{col 33}"Pre-Test Session (1), Post-Test
{col 33}Sessions (1)"
{col 21}         5{col 33}"Pre-Test Session (1), Post-Test
{col 33}Sessions (2)"
{col 21}         2{col 33}"Yes - Details Nr"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}referrals{right:Referrals}
{txt}{hline}

{col 19}type:  string ({res}str64{txt})

{col 10}unique values:  {res}6{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       150{col 33}"."
{col 21}         1{col 33}"No"
{col 21}         2{col 33}"Rapid Test"
{col 21}         2{col 33}"To Private Provider If Insured
To Mohss
{col 33}Facility If Not Insured"
{col 21}         4{col 33}"Yes - Hiv Care"
{col 21}         4{col 33}"Yes-Details Nr"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}method{right:Method}
{txt}{hline}

{col 19}type:  string ({res}str288{txt})

{col 10}unique values:  {res}17{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Hiv Rapid Test"
{col 26}"Hiv Rapid Test"
{col 26}"Hiv Rapid Test"
{col 26}"Rapid Test"

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}id_tech{right:Technology}
{txt}{hline}

{col 19}type:  string ({res}str288{txt})

{col 10}unique values:  {res}17{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Hiv Rapid Test"
{col 26}"Hiv Rapid Test"
{col 26}"Hiv Rapid Test"
{col 26}"Rapid Test"

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}treatment_phase{right:Treatment phase}
{txt}{hline}

{col 19}type:  string ({res}str3{txt}), but longest is str1

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}arv_regimen{right:ARV Regimen}
{txt}{hline}

{col 19}type:  string ({res}str98{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       158{col 33}"."
{col 21}         5{col 33}"1st line: Lamivudine/zidovudine +
{col 33}nevirapine 150/300 ; 2nd line:
{col 33}Tenofovir/lamivudine + nevirapine"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}treatment{right:Treatment}
{txt}{hline}

{col 19}type:  string ({res}str25{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       156{col 33}"."
{col 21}         5{col 33}"Yes, Details NR"
{col 21}         2{col 33}"cotrimoxazole prophylaxis"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}screening_diagnoses{right:Screening and diagnosis}
{txt}{hline}

{col 19}type:  string ({res}str47{txt})

{col 10}unique values:  {res}6{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        12{col 33}"."
{col 21}       128{col 33}"HIV testing"
{col 21}         3{col 33}"HIV testing, STI testing"
{col 21}         9{col 33}"HIV testing; OI testing"
{col 21}         9{col 33}"HIV, Malaria, hypertension and diabetes
{col 33}testing"
{col 21}         2{col 33}"HIV, Syphilis, HepB testing"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}community_awareness{right:Community awareness}
{txt}{hline}

{col 19}type:  string ({res}str40{txt})

{col 10}unique values:  {res}6{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         4{col 33}"annual HIV prevention campaign"
{col 21}       129{col 33}"."
{col 21}         5{col 33}"None"
{col 21}         2{col 33}"Peer education"
{col 21}        14{col 33}"mass media"
{col 21}         9{col 33}"mass media, community meetings,
{col 33}programs"

{txt}{col 16}warning:  variable has leading and embedded blanks

{txt}{hline}
{res}health_system{right:health_system}
{txt}{hline}

{col 19}type:  string ({res}str2{txt}), but longest is str1

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}id_activities{right:Costed activities}
{txt}{hline}

{col 19}type:  string ({res}str92{txt})

{col 10}unique values:  {res}9{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       102{col 33}"Counseling Content, Screening &
{col 33}Diagnoses"
{col 21}        18{col 33}"Demand Generation, Counseling Content,
{col 33}Screening & Diagnoses"
{col 21}         9{col 33}"Demand Generation, Counseling Content,
{col 33}Screening & Diagnoses, Community
{col 33}Awareness"
{col 21}         2{col 33}"Demand Generation, Counseling Content,
{col 33}Screening & Diagnoses, Treatment,
{col 33}Community Awareness"
{col 21}         4{col 33}"Demand Generation, Counseling Content,
{col 33}Supportive Care, Screening & Diagnoses"
{col 21}         2{col 33}"Demand Generation; Counseling;
{col 33}Referrals"
{col 21}         4{col 33}"Rapid Test"
{col 21}        17{col 33}"Screening & Diagnoses"
{col 21}         5{col 33}"Supportive Care, Arv Regimen, Screening
{col 33}& Diagnoses, Treatment"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}start_month{right:Start Month}
{txt}{hline}

{col 19}type:  numeric ({res}byte{txt})

{col 18}range:  [{res}1{txt},{res}12{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}11{col 51}{txt}missing .:  {res}63{txt}/{res}163

{txt}{col 19}mean:{res}{col 26}    4.19
{txt}{col 15}std. dev:{res}{col 26} 2.98039

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}       1{col 37}       2{col 47}       4{col 57}       6{col 67}      10

{txt}{hline}
{res}start_year{right:Start Year}
{txt}{hline}

{col 19}type:  numeric ({res}int{txt})

{col 18}range:  [{res}1996{txt},{res}2015{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}16{col 51}{txt}missing .:  {res}0{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 2008.38
{txt}{col 15}std. dev:{res}{col 26} 3.78954

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    2004{col 37}    2007{col 47}    2008{col 57}    2011{col 67}    2013

{txt}{hline}
{res}end_month{right:End Month}
{txt}{hline}

{col 19}type:  numeric ({res}byte{txt})

{col 18}range:  [{res}3{txt},{res}12{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}8{col 51}{txt}missing .:  {res}63{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        22{col 33}3
{col 21}        17{col 33}4
{col 21}        12{col 33}5
{col 21}         4{col 33}6
{col 21}         5{col 33}7
{col 21}         2{col 33}8
{col 21}        12{col 33}9
{col 21}        26{col 33}12
{col 21}        63{col 33}.

{txt}{hline}
{res}end_year{right:End Year}
{txt}{hline}

{col 19}type:  numeric ({res}int{txt})

{col 18}range:  [{res}1996{txt},{res}2015{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}15{col 51}{txt}missing .:  {res}0{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 2009.07
{txt}{col 15}std. dev:{res}{col 26}  3.8515

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    2005{col 37}    2007{col 47}    2009{col 57}    2012{col 67}    2014

{txt}{hline}
{res}period_portrayed{right:Total Months}
{txt}{hline}

{col 19}type:  string ({res}str9{txt})

{col 10}unique values:  {res}8{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         2{col 33}"10"
{col 21}       113{col 33}"12"
{col 21}        16{col 33}"12 months"
{col 21}         9{col 33}"13"
{col 21}        10{col 33}"3"
{col 21}         5{col 33}"6"
{col 21}         4{col 33}"6-12"
{col 21}         4{col 33}"9"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}year_intro{right:Year introduced at study site}
{txt}{hline}

{col 19}type:  numeric ({res}int{txt})

{col 18}range:  [{res}2001{txt},{res}2008{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}6{col 51}{txt}missing .:  {res}145{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         4{col 33}2001
{col 21}         2{col 33}2003
{col 21}         7{col 33}2004
{col 21}         1{col 33}2006
{col 21}         2{col 33}2007
{col 21}         2{col 33}2008
{col 21}       145{col 33}.

{txt}{hline}
{res}coverage{right:Coverage}
{txt}{hline}

{col 19}type:  string ({res}str28{txt})

{col 10}unique values:  {res}5{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       157{col 33}"."
{col 21}         1{col 33}".98"
{col 21}         1{col 33}".99"
{col 21}         2{col 33}"60% of the community members"
{col 21}         2{col 33}"800000 people"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}id_pop_dem_std{right:Target group (demographic)}
{txt}{hline}

{col 19}type:  string ({res}str23{txt})

{col 10}unique values:  {res}9{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         5{col 33}"."
{col 21}        12{col 33}"Adults"
{col 21}       115{col 33}"General Populations"
{col 21}         6{col 33}"High-risk groups"
{col 21}         2{col 33}"People who Inject Drugs"
{col 21}         2{col 33}"Prisoners"
{col 21}         2{col 33}"Sex Worker"
{col 21}         2{col 33}"explicit"
{col 21}        17{col 33}"inferred"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}id_pop_clin_std{right:Target group (clinical)}
{txt}{hline}

{col 19}type:  string ({res}str18{txt})

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"Unknown HIV Status"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}pop_age{right:Average Age}
{txt}{hline}

{col 19}type:  string ({res}str20{txt})

{col 10}unique values:  {res}7{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       143{col 33}"."
{col 21}         2{col 33}"25"
{col 21}         4{col 33}"28"
{col 21}         5{col 33}"30"
{col 21}         4{col 33}"34"
{col 21}         4{col 33}"41.5"
{col 21}         1{col 33}"Rural: 29, Urban: 27"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}pop_sex{right:Gender}
{txt}{hline}

{col 19}type:  string ({res}str32{txt})

{col 10}unique values:  {res}22{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}"."
{col 26}"."
{col 26}"37.2% Male"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}pop_ses{right:SES}
{txt}{hline}

{col 19}type:  string ({res}str102{txt})

{col 10}unique values:  {res}9{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       134{col 33}"."
{col 21}         2{col 33}"19% uneployed, median monthy income
{col 33}(range) is $77($36-$128)"
{col 21}         4{col 33}"50% employed"
{col 21}         2{col 33}"7% unemployed, median monthly incom
{col 33}(range) is $48($36-$72)"
{col 21}         2{col 33}"7% unemployed, median monthly income
{col 33}(range) is $124 (52-246)"
{col 21}         1{col 33}"Mean monthly house hold expenditures:
{col 33}Rural: $52, Urban: $108"
{col 21}         2{col 33}"Monthly median income ($17.64)"
{col 21}        12{col 33}"high quintile (12.6%), 2nd highest
{col 33}(21.7%),middle (22.9%), 2nd lowest
{col 33}(21.7%), lowest quintile (20.9%)"
{col 21}         4{col 33}"high quintile (22.2%), 2nd highest
{col 33}(19.9%),middle (19.1%), 2nd lowest
{col 33}(18.7%), lowest quintile (19.9%)"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}pop_education{right:Education}
{txt}{hline}

{col 19}type:  string ({res}str85{txt})

{col 10}unique values:  {res}6{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       144{col 33}"."
{col 21}         1{col 33}"Ever attended school (77%)"
{col 21}         1{col 33}"Ever attended school (79%)"
{col 21}         1{col 33}"Secondary or higher: Rural: 32.1%,
{col 33}Urban: 54%"
{col 21}         4{col 33}"up to standard 8 (38.7%), up to form 6
{col 33}(57%), University or training college
{col 33}(3.2%)"
{col 21}        12{col 33}"up to standard 8 (52.2%), up to form 6
{col 33}(44.7%), University or training college
{col 33}(4.1%)"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}hiv_prev{right:HIV Prevalence}
{txt}{hline}

{col 19}type:  string ({res}str60{txt})

{col 10}unique values:  {res}28{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}".066"
{col 26}".09"
{col 26}".26"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}tb_prev{right:TB Prevalence}
{txt}{hline}

{col 19}type:  string ({res}str3{txt}), but longest is str1

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}tb_rx_resistance{right:TB Drug Resistance}
{txt}{hline}

{col 19}type:  string ({res}str1{txt})

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}costing_purpose{right:Costing Purpose}
{txt}{hline}

{col 19}type:  string ({res}str991{txt})

{col 10}unique values:  {res}25{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"To demonstrate the feasibility, acceptability and
{col 26}cost of home-based HIV testing and to examine the
{col 26}applicability of the model to high HIV prevalence
{col 26}settings."
{col 26}"To evaluate costs and outcomes of voluntary
{col 26}counselling and testing (VCT) service delivery models
{col 26}in urban Indonesia."
{col 26}"To examine the relative costs of provider-initiated
{col 26}testing and counselling (PITC) services compared with
{col 26}voluntary counselling and testing (VCT) services in
{col 26}the same health facilities in two low-resource
{col 26}settings: Kenya and Swaziland."
{col 26}"To inform scalability, authors sought to determine:
{col 26}1) overall cost and efficiency of this approach; and
{col 26}2) costs associated with point-of-care (POC) CD4
{col 26}testing, multi-disease services, and community
{col 26}mobilization."

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}timing{right:Timing}
{txt}{hline}

{col 19}type:  string ({res}str15{txt})

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"Cross-Sectional"

{txt}{hline}
{res}country_sampling{right:Country Sampling}
{txt}{hline}

{col 19}type:  string ({res}str9{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        90{col 33}"."
{col 21}        73{col 33}"Purposive"

{txt}{hline}
{res}geo_sampling_incountry{right:Geographic Area In Country Sampling}
{txt}{hline}

{col 19}type:  string ({res}str11{txt})

{col 10}unique values:  {res}5{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        58{col 33}"."
{col 21}        16{col 33}"Cluster"
{col 21}        14{col 33}"Convenience"
{col 21}        58{col 33}"Purposive"
{col 21}        17{col 33}"Random"

{txt}{hline}
{res}site_sampling{right:Site Sampling}
{txt}{hline}

{col 19}type:  string ({res}str14{txt})

{col 10}unique values:  {res}6{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        11{col 33}"."
{col 21}        16{col 33}"Cluster"
{col 21}        24{col 33}"Convenience"
{col 21}        47{col 33}"Entire Program"
{col 21}        53{col 33}"Purposive"
{col 21}        12{col 33}"Random"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}px_sampling{right:Patient Sampling}
{txt}{hline}

{col 19}type:  string ({res}str14{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        98{col 33}"."
{col 21}        16{col 33}"Cluster"
{col 21}         8{col 33}"Convenience"
{col 21}        41{col 33}"Entire Program"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}sample_size_derived{right:Sample size formally derived}
{txt}{hline}

{col 19}type:  string ({res}str2{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       120{col 33}"."
{col 21}        43{col 33}"No"

{txt}{hline}
{res}controls{right:Controls}
{txt}{hline}

{col 19}type:  string ({res}str3{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       138{col 33}"."
{col 21}        17{col 33}"No"
{col 21}         8{col 33}"Yes"

{txt}{hline}
{res}econ_perspective_actual{right:Perspective}
{txt}{hline}

{col 19}type:  string ({res}str8{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       139{col 33}"Provider"
{col 21}        24{col 33}"Society"

{txt}{hline}
{res}econ_costing{right:Economic / Financial}
{txt}{hline}

{col 19}type:  string ({res}str14{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       153{col 33}"Economic"
{col 21}        10{col 33}"Financial Only"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}real_world{right:Real World / Per Protocol}
{txt}{hline}

{col 19}type:  string ({res}str12{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         3{col 33}"Per Protocol"
{col 21}       160{col 33}"Real World"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}asd_costs{right:Above Service Costs Included}
{txt}{hline}

{col 19}type:  string ({res}str19{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        27{col 33}"."
{col 21}        96{col 33}"No Costs Included"
{col 21}        40{col 33}"Some Costs Included"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}list_asd_costs{right:Above Service Cost List}
{txt}{hline}

{col 19}type:  string ({res}str164{txt})

{col 10}unique values:  {res}10{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}"."
{col 26}"."
{col 26}"Monitoring And Evaluation, Training"

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}omitted_costs{right:Omitted Costs}
{txt}{hline}

{col 19}type:  string ({res}str234{txt})

{col 10}unique values:  {res}11{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Patient costs"
{col 26}"Patient costs"
{col 26}"Patient costs"
{col 26}"Patient costs"

{txt}{col 16}warning:  variable has leading and embedded blanks

{txt}{hline}
{res}sensitivity_analysis{right:Sensitivity Analysis}
{txt}{hline}

{col 19}type:  string ({res}str13{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}"."
{col 21}         4{col 33}"Comprehensive"
{col 21}        15{col 33}"Limited"
{col 21}       143{col 33}"None"

{txt}{hline}
{res}scale{right:Economies of scale}
{txt}{hline}

{col 19}type:  string ({res}str9{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        11{col 33}"Analyzed"
{col 21}       111{col 33}"Discussed"
{col 21}        41{col 33}"Ignored"

{txt}{hline}
{res}research_costs{right:Research Costs Included}
{txt}{hline}

{col 19}type:  string ({res}str8{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        53{col 33}"."
{col 21}       110{col 33}"Excluded"

{txt}{hline}
{res}unrelated_costs{right:Unrelated Costs Included}
{txt}{hline}

{col 19}type:  string ({res}str2{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       139{col 33}"."
{col 21}        24{col 33}"No"

{txt}{hline}
{res}overhead{right:Overhead Costs Included}
{txt}{hline}

{col 19}type:  string ({res}str3{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        12{col 33}"No"
{col 21}       151{col 33}"Yes"

{txt}{hline}
{res}overhead_costs{right:Overhead Costs List}
{txt}{hline}

{col 19}type:  string ({res}str461{txt})

{col 10}unique values:  {res}19{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"Building Maintenance, Communications And Stationery
{col 26}"
{col 26}"Buildings, Equipment, Supplies And Support Staff"
{col 26}"Details Nr"
{col 26}"None"

{txt}{col 16}warning:  variable has embedded and trailing blanks

{txt}{hline}
{res}pot_distortions{right:Potential distortions}
{txt}{hline}

{col 19}type:  string ({res}str93{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       159{col 33}"."
{col 21}         4{col 33}"THERE WAS A SIGNIFICANT VARIATION IN
{col 33}THE NUMBER OF PTIENTS PER MONTHS DURING
{col 33}THE STUDY PERIOD"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}volunteer_time{right:Valuing Volunteer Time}
{txt}{hline}

{col 19}type:  string ({res}str18{txt})

{col 10}unique values:  {res}4{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       122{col 33}"."
{col 21}        16{col 33}"Interview"
{col 21}         1{col 33}"Local Paid Income"
{col 21}        24{col 33}"Valued - Method Nr"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}family_time{right:Valuing Family Time}
{txt}{hline}

{col 19}type:  string ({res}str17{txt})

{col 10}unique values:  {res}2{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       147{col 33}"."
{col 21}        16{col 33}"Local Full Income"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}px_costs_measured{right:Patient-Incurred Costs Measured}
{txt}{hline}

{col 19}type:  string ({res}str32{txt})

{col 10}unique values:  {res}5{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        12{col 33}"."
{col 21}       108{col 33}"Not Included"
{col 21}         3{col 33}"Not Includedt Included"
{col 21}        16{col 33}"Not Includedt Includedt Included"
{col 21}        24{col 33}"Yes"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}cat_cost{right:Catastrophic Cost Calculated}
{txt}{hline}

{col 19}type:  string ({res}str12{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       143{col 33}"."
{col 21}        19{col 33}"No"
{col 21}         1{col 33}"See Cell R67"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}currency_yr{right:Reported Currency Year}
{txt}{hline}

{col 19}type:  numeric ({res}int{txt})

{col 18}range:  [{res}1999{txt},{res}2016{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}16{col 51}{txt}missing .:  {res}11{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 2009.71
{txt}{col 15}std. dev:{res}{col 26} 3.12569

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    2007{col 37}    2008{col 47}    2009{col 57}    2012{col 67}    2014

{txt}{hline}
{res}iso_code{right:Reported Currency}
{txt}{hline}

{col 19}type:  string ({res}str3{txt})

{col 10}unique values:  {res}13{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"KES"
{col 26}"MWK"
{col 26}"SZL"
{col 26}"USD"

{txt}{hline}
{res}currency_iso{right:Currency of Data Collection}
{txt}{hline}

{col 19}type:  string ({res}str3{txt})

{col 10}unique values:  {res}11{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"KES"
{col 26}"KES"
{col 26}"MWK"
{col 26}"USD"

{txt}{hline}
{res}currency_x{right:Currency Exchange Method}
{txt}{hline}

{col 19}type:  string ({res}str29{txt})

{col 10}unique values:  {res}3{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        25{col 33}"."
{col 21}       122{col 33}"Market Only"
{col 21}        16{col 33}"Traded/Market, Non-Traded Ppp"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}current_x_rate{right:Currency Exchange Rate}
{txt}{hline}

{col 19}type:  string ({res}str17{txt})

{col 10}unique values:  {res}30{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 15}examples:  {res}"."
{col 26}"426"
{col 26}"7.85"
{col 26}"78.79000000000001"

{txt}{hline}
{res}discount_rate{right:Discount Rate}
{txt}{hline}

{col 19}type:  string ({res}str6{txt})

{col 10}unique values:  {res}5{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}        57{col 33}"."
{col 21}        91{col 33}".03"
{col 21}         1{col 33}".04"
{col 21}        12{col 33}"3"
{col 21}         2{col 33}"3%, 6%"

{txt}{col 16}warning:  variable has embedded blanks

{txt}{hline}
{res}inflation{right:Inflation rate}
{txt}{hline}

{col 19}type:  string ({res}str2{txt}), but longest is str1

{col 10}unique values:  {res}1{col 51}{txt}missing "":  {res}0{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}"."

{txt}{hline}
{res}mean_cost{right:Mean Unit Cost}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}2.01{txt},{res}1995{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}162{col 51}{txt}missing .:  {res}0{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 104.345
{txt}{col 15}std. dev:{res}{col 26}  260.71

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    5.71{col 37}    8.89{col 47}  22.547{col 57}   97.04{col 67}   237.6

{txt}{hline}
{res}si_personnel{right:Personnel (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.12{txt},{res}252.31547{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}51{col 51}{txt}missing .:  {res}111{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 14.4749
{txt}{col 15}std. dev:{res}{col 26} 42.9122

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     1.1{col 37} 2.01286{col 47}   3.345{col 57}    8.15{col 67} 15.6733

{txt}{hline}
{res}si_per_service_delivery{right:Personnel: Direct Service Delivery (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}1.1125{txt},{res}252.31547{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}11{col 51}{txt}missing .:  {res}152{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 48.5122
{txt}{col 15}std. dev:{res}{col 26} 87.6372

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27} 1.17327{col 37}    1.19{col 47} 2.66034{col 57} 51.3848{col 67} 188.585

{txt}{hline}
{res}si_per_support{right:Personnel: Support (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.97{txt},{res}4.18{txt}]{col 55}units:  {res}.01
{col 10}{txt}unique values:  {res}5{col 51}{txt}missing .:  {res}158{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.97000003
{col 21}         1{col 33}1
{col 21}         1{col 33}1.15
{col 21}         1{col 33}2.1400001
{col 21}         1{col 33}4.1799998
{col 21}       158{col 33}.

{txt}{hline}
{res}si_per_mixed_unspec{right:Personnel: Mixed Unspecified (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.12{txt},{res}15.785844{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}44{col 51}{txt}missing .:  {res}118{txt}/{res}163

{txt}{col 19}mean:{res}{col 26}  4.6582
{txt}{col 15}std. dev:{res}{col 26} 4.68231

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .73{col 37} 1.82624{col 47} 2.93202{col 57}    4.89{col 67}    13.5

{txt}{hline}
{res}si_recurrent{right:Recurrent Goods (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.31{txt},{res}285.39489{txt}]{col 55}units:  {res}1.000e-16
{col 10}{txt}unique values:  {res}51{col 51}{txt}missing .:  {res}112{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 15.1464
{txt}{col 15}std. dev:{res}{col 26} 47.9909

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    1.03{col 37}  1.5931{col 47}    3.04{col 57}    6.98{col 67}  18.886

{txt}{hline}
{res}si_rec_key_drugs{right:Recurring: Supplies (key drugs) (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}0{txt}]{col 55}units:  {res}1
{col 10}{txt}unique values:  {res}1{col 51}{txt}missing .:  {res}159{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         4{col 33}0
{col 21}       159{col 33}.

{txt}{hline}
{p 0 39}{res}si_rec_med_int_supplies{space 16}Recurring: Medical Supplies (excluding drugs) (SI){p_end}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.15{txt},{res}105.53811{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}15{col 51}{txt}missing .:  {res}147{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 12.3581
{txt}{col 15}std. dev:{res}{col 26} 28.3915

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .15{col 37}     .67{col 47} 2.44425{col 57}  5.7703{col 67} 56.9055

{txt}{hline}
{res}si_rec_nonmed_int_supplies{right:Recurring: Non-medical Supplies (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.9390244{txt},{res}14.896922{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}6{col 51}{txt}missing .:  {res}157{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.93902439
{col 21}         1{col 33}6.1543941
{col 21}         1{col 33}8.7398436
{col 21}         1{col 33}9.3928576
{col 21}         1{col 33}13.378343
{col 21}         1{col 33}14.896922
{col 21}       157{col 33}.

{txt}{hline}
{res}si_rec_building_space{right:Recurring: Building Space (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}37.578747{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}13{col 51}{txt}missing .:  {res}150{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 9.07248
{txt}{col 15}std. dev:{res}{col 26} 13.2757

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    .228{col 37}  .58422{col 47} 1.57636{col 57} 13.5157{col 67} 35.9994

{txt}{hline}
{res}si_rec_mixed{right:Recurring: Mixed (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}si_rec_other{right:Recurring: Other (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.0445{txt},{res}135.11758{txt}]{col 55}units:  {res}1.000e-10
{col 10}{txt}unique values:  {res}49{col 51}{txt}missing .:  {res}114{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 8.23052
{txt}{col 15}std. dev:{res}{col 26} 22.9344

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .31{col 37}     .97{col 47}    2.76{col 57}    5.73{col 67}   11.16

{txt}{hline}
{res}si_capital{right:Capital (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.03{txt},{res}24.5{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}40{col 51}{txt}missing .:  {res}120{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 1.53918
{txt}{col 15}std. dev:{res}{col 26} 4.02745

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .07{col 37}     .15{col 47}     .42{col 57} .908414{col 67}    3.17

{txt}{hline}
{res}si_cap_med_equip{right:Capital: Equipment (medical) (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.05226481{txt},{res}10.642858{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}8{col 51}{txt}missing .:  {res}154{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.05226481
{col 21}         1{col 33}.46925133
{col 21}         1{col 33}.52999997
{col 21}         2{col 33}.69
{col 21}         1{col 33}.69999999
{col 21}         1{col 33}1.17
{col 21}         1{col 33}1.5605701
{col 21}         1{col 33}10.642858
{col 21}       154{col 33}.

{txt}{hline}
{res}si_cap_nonmed_equip{right:Capital: Equipment (non-medical) (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.09282{txt},{res}.31043479{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}5{col 51}{txt}missing .:  {res}158{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.09282
{col 21}         1{col 33}.11433757
{col 21}         1{col 33}.18347827
{col 21}         1{col 33}.2123412
{col 21}         1{col 33}.31043479
{col 21}       158{col 33}.

{txt}{hline}
{res}si_cap_building_space{right:Capital: Building Space (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}6.4642859{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}30{col 51}{txt}missing .:  {res}126{txt}/{res}163

{txt}{col 19}mean:{res}{col 26}  .63324
{txt}{col 15}std. dev:{res}{col 26} 1.22081

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .04{col 37}     .09{col 47}  .22686{col 57}      .5{col 67}    1.67

{txt}{hline}
{res}si_cap_vehicles{right:Capital: Vehicles (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}si_cap_mixed{right:Capital: Mixed (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}si_cap_other{right:Capital: Other (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}7.3928571{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}11{col 51}{txt}missing .:  {res}152{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 2.30332
{txt}{col 15}std. dev:{res}{col 26} 2.93384

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    .304{col 37} .344418{col 47}     .78{col 57} 5.64171{col 67} 7.30662

{txt}{hline}
{res}si_mixed{right:Mixed (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.29000001{txt},{res}7.6999998{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}7{col 51}{txt}missing .:  {res}156{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.29000001
{col 21}         1{col 33}.65999998
{col 21}         1{col 33}3.15202
{col 21}         1{col 33}5.30865
{col 21}         1{col 33}5.8295002
{col 21}         1{col 33}7.35672
{col 21}         1{col 33}7.6999998
{col 21}       156{col 33}.

{txt}{hline}
{res}si_unspecified{right:Unspecified (SI)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.07{txt},{res}.23{txt}]{col 55}units:  {res}.01
{col 10}{txt}unique values:  {res}5{col 51}{txt}missing .:  {res}158{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.07
{col 21}         1{col 33}.09
{col 21}         1{col 33}.12
{col 21}         1{col 33}.13
{col 21}         1{col 33}.23
{col 21}       158{col 33}.

{txt}{hline}
{res}a_primary_sd{right:Primary Service Delivery (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.12{txt},{res}357.85358{txt}]{col 55}units:  {res}1.000e-18
{col 10}{txt}unique values:  {res}47{col 51}{txt}missing .:  {res}115{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 21.2108
{txt}{col 15}std. dev:{res}{col 26} 61.2749

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27} 1.17327{col 37} 3.68951{col 47}   5.805{col 57} 11.9594{col 67}   19.23

{txt}{hline}
{res}a_prisd_unspecified{right:Primary SD: Unspecified (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.15000001{txt},{res}102.43737{txt}]{col 55}units:  {res}1.000e-14
{col 10}{txt}unique values:  {res}34{col 51}{txt}missing .:  {res}128{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 7.99035
{txt}{col 15}std. dev:{res}{col 26} 17.0006

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .21{col 37}    2.68{col 47}    4.01{col 57}    6.83{col 67}   11.16

{txt}{hline}
{res}a_prisd_unspec_counseling{right:Primary SD: Counseling unspecified (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}1.1125{txt},{res}2.66034{txt}]{col 55}units:  {res}.00001
{col 10}{txt}unique values:  {res}4{col 51}{txt}missing .:  {res}159{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}1.1125
{col 21}         1{col 33}1.17327
{col 21}         1{col 33}1.34787
{col 21}         1{col 33}2.6603401
{col 21}       159{col 33}.

{txt}{hline}
{res}a_prisd_post_test_counseling{right:Primary SD: Post-test counseling (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}2.93202{txt},{res}2.93202{txt}]{col 55}units:  {res}.00001
{col 10}{txt}unique values:  {res}1{col 51}{txt}missing .:  {res}162{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}2.9320199
{col 21}       162{col 33}.

{txt}{hline}
{res}a_prisd_lab_services{right:Primary SD: Lab services (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.82{txt},{res}105.53811{txt}]{col 55}units:  {res}1.000e-06
{col 10}{txt}unique values:  {res}5{col 51}{txt}missing .:  {res}154{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         5{col 33}.81999999
{col 21}         1{col 33}1.21
{col 21}         1{col 33}1.52
{col 21}         1{col 33}56.905495
{col 21}         1{col 33}105.53811
{col 21}       154{col 33}.

{txt}{hline}
{res}a_prisd_htc_service_delivery{right:Primary SD: HTC service delivery (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.73{txt},{res}51.3848{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}30{col 51}{txt}missing .:  {res}132{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 6.40677
{txt}{col 15}std. dev:{res}{col 26}  9.8743

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    1.41{col 37}    2.22{col 47}    3.29{col 57}    5.04{col 67}   11.45

{txt}{hline}
{res}a_prisd_hiv_rapid_test{right:Primary SD: HIV rapid testing (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}1.0789981{txt},{res}252.31547{txt}]{col 55}units:  {res}1.000e-07
{col 10}{txt}unique values:  {res}6{col 51}{txt}missing .:  {res}157{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}1.0789981
{col 21}         1{col 33}1.1758733
{col 21}         1{col 33}3.8399999
{col 21}         1{col 33}13.23
{col 21}         1{col 33}86.147948
{col 21}         1{col 33}252.31547
{col 21}       157{col 33}.

{txt}{hline}
{res}a_prisd_arv_delivery{right:Primary SD: ARV delivery}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.12{txt},{res}1.99{txt}]{col 55}units:  {res}.01
{col 10}{txt}unique values:  {res}4{col 51}{txt}missing .:  {res}159{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.12
{col 21}         1{col 33}.34999999
{col 21}         1{col 33}1.1
{col 21}         1{col 33}1.99
{col 21}       159{col 33}.

{txt}{hline}
{res}a_secondary_sd{right:Secondary Service Delivery (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_ancillary{right:Ancillary (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.01{txt},{res}6.4642859{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}27{col 51}{txt}missing .:  {res}133{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} .769139
{txt}{col 15}std. dev:{res}{col 26} 1.37778

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}    .045{col 37}     .09{col 47}     .26{col 57}      .5{col 67} 2.65702

{txt}{hline}
{res}a_anc_demand_generation{right:Ancillary: Demand generation (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.01{txt},{res}.12{txt}]{col 55}units:  {res}.01
{col 10}{txt}unique values:  {res}2{col 51}{txt}missing .:  {res}161{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.01
{col 21}         1{col 33}.12
{col 21}       161{col 33}.

{txt}{hline}
{res}a_anc_lab_services{right:Ancillary: Lab Services (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_anc_adhreten{right:Ancillary: Adherence/Retention (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_anc_bldg_equip{right:Ancillary: Building equipment (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.10966694{txt},{res}2.4703918{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}2{col 51}{txt}missing .:  {res}161{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.10966694
{col 21}         1{col 33}2.4703918
{col 21}       161{col 33}.

{txt}{hline}
{res}a_anc_unspecified{right:Ancillary: Unspecified (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}6.4642859{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}25{col 51}{txt}missing .:  {res}135{txt}/{res}163

{txt}{col 19}mean:{res}{col 26}  .72729
{txt}{col 15}std. dev:{res}{col 26} 1.38492

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .03{col 37}     .08{col 47}     .26{col 57}     .47{col 67} 2.82927

{txt}{hline}
{res}a_operational{right:Operational (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.11{txt},{res}171.11693{txt}]{col 55}units:  {res}1.000e-11
{col 10}{txt}unique values:  {res}25{col 51}{txt}missing .:  {res}138{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 14.1732
{txt}{col 15}std. dev:{res}{col 26} 41.8464

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27} .242518{col 37}     .78{col 47}    1.68{col 57}    3.67{col 67} 7.39286

{txt}{hline}
{res}a_ope_bldg_equip{right:Operational: Buildings and Equipment (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}39.059299{txt}]{col 55}units:  {res}1.000e-06
{col 10}{txt}unique values:  {res}9{col 51}{txt}missing .:  {res}153{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}0
{col 21}         1{col 33}.03
{col 21}         2{col 33}.04
{col 21}         1{col 33}.14
{col 21}         1{col 33}.49698001
{col 21}         1{col 33}.67648
{col 21}         1{col 33}1.5486
{col 21}         1{col 33}38.952554
{col 21}         1{col 33}39.059299
{col 21}       153{col 33}.

{txt}{hline}
{res}a_ope_logistics{right:Operational: Logistics (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_ope_program_mgmt{right:Operational: Program Management (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.11{txt},{res}4.2499998{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}11{col 51}{txt}missing .:  {res}152{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 1.29197
{txt}{col 15}std. dev:{res}{col 26} 1.20691

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .24{col 37}  .32379{col 47}    1.12{col 57} 1.82624{col 67}    2.37

{txt}{hline}
{res}a_ope_supervision{right:Operational: Supervision (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_ope_training{right:Operational: Training (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.0445{txt},{res}32.56015{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}17{col 51}{txt}missing .:  {res}146{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 3.60981
{txt}{col 15}std. dev:{res}{col 26} 7.85549

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}  .05271{col 37} .344418{col 47}     .75{col 57}    1.69{col 67} 7.39286

{txt}{hline}
{res}a_ope_transportation{right:Operational: Transportation (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}0{txt},{res}119.87785{txt}]{col 55}units:  {res}1.000e-09
{col 10}{txt}unique values:  {res}5{col 51}{txt}missing .:  {res}158{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}0
{col 21}         1{col 33}.01827782
{col 21}         1{col 33}.30399999
{col 21}         1{col 33}15.018416
{col 21}         1{col 33}119.87785
{col 21}       158{col 33}.

{txt}{hline}
{res}a_ope_massed{right:Operational: Mass Education (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_ope_hmis{right:Operational: HMIS and Record-Keeping (A)}
{txt}{hline}

{col 19}type:  numeric ({res}float{txt})

{col 18}range:  [{res}.{txt},{res}.{txt}]{col 55}units:  {res}.
{col 10}{txt}unique values:  {res}0{col 51}{txt}missing .:  {res}163{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}       163{col 33}.

{txt}{hline}
{res}a_ope_unspecified{right:Operational: Unspecified (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.39{txt},{res}45.943081{txt}]{col 55}units:  {res}1.000e-06
{col 10}{txt}unique values:  {res}7{col 51}{txt}missing .:  {res}156{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.38999999
{col 21}         1{col 33}.77999997
{col 21}         1{col 33}.79716
{col 21}         1{col 33}1.0700001
{col 21}         1{col 33}1.39
{col 21}         1{col 33}12.179782
{col 21}         1{col 33}45.943081
{col 21}       156{col 33}.

{txt}{hline}
{res}a_mixed{right:Mixed (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.31{txt},{res}38.892174{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}15{col 51}{txt}missing .:  {res}148{txt}/{res}163

{txt}{col 19}mean:{res}{col 26} 11.4798
{txt}{col 15}std. dev:{res}{col 26} 14.1788

{txt}{col 12}percentiles:{col 32}10%{col 42}25%{col 52}50%{col 62}75%{col 72}90%
{res}{col 27}     .88{col 37}    1.05{col 47} 5.30865{col 57} 28.4174{col 67} 36.7278

{txt}{hline}
{res}a_mix_bldg_equip{right:Mixed: Building equipment (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.228{txt},{res}.228{txt}]{col 55}units:  {res}.001
{col 10}{txt}unique values:  {res}1{col 51}{txt}missing .:  {res}162{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.228
{col 21}       162{col 33}.

{txt}{hline}
{res}a_unspecified{right:Unspecified (A)}
{txt}{hline}

{col 19}type:  numeric ({res}double{txt})

{col 18}range:  [{res}.05226481{txt},{res}14.896922{txt}]{col 55}units:  {res}1.000e-08
{col 10}{txt}unique values:  {res}8{col 51}{txt}missing .:  {res}155{txt}/{res}163

{txt}{col 13}tabulation:  Freq.  Value
{col 21}{res}         1{col 33}.05226481
{col 21}         1{col 33}.18000001
{col 21}         1{col 33}.41999999
{col 21}         1{col 33}.46925133
{col 21}         1{col 33}1.5605701
{col 21}         1{col 33}8.7398436
{col 21}         1{col 33}10.642858
{col 21}         1{col 33}14.896922
{col 21}       155{col 33}.
{txt}
{com}. /*
> 
> \end{c -(}verbatim{c )-}
> 
> 
> 
> \begin{c -(}verbatim{c )-}
> ***/
. 
. * can generate clean tables
. 
. /***
> \end{c -(}verbatim{c )-}
> 
> Here we import the table of summary statistics.\\
> 
> \input{c -(}./checks/sumstats{c )-} 
> 
> Now lets generate and add a figure that visualizing one of these variables.\\
> 
> ----------------------
> export final tex document
> -----------------------------
> */
. 
. /* Exporting in several formats */
. *markdoc example1, replace              /* exporting a markdown file */
. *markdoc example1, replace export(html) 
. *markdoc example1, replace export(odt) 
. *markdoc example1, replace export(txt) 
. *markdoc example1, replace export(epub) 
. *markdoc mytemplatelatex, replace author() affiliation() export(docx) 
. /* could add date option (no parentheses) */
. *markdoc mytemplatelatex, replace author() affiliation() export(pdf)
. 
. * markdoc mytemplatelatex, replace author() affiliation() export(docx) markup()
. * markdoc mytemplatelatex, replace author() affiliation() export(html) markup()
. markdoc data_check, replace author() affiliation() export(tex) markup()
{txt}
{p}(MarkDoc created {bf:{browse "data_check.tex"}})


{com}. 
. /*
> can also produce pdf slides:
> markdoc example1, replace author(Matthew C. Ingram) affiliation(University at Albany, SUNY) date export(slide)
> NOTE: this will replace any existing pdf file with same name, so be cautious
> */
. 
. * end
. 
. 
{txt}end of do-file

{com}. br

. br si_*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         //cd "/Users/dcameron03/Documents/Berkeley/`GSI with Jim/Stata/GHCC/VMMC/"
.         cd "C:\Users\Lily Alexander\Dropbox\ALL LIFE THINGS\INSP\Work with Sergio\GHCC\Post-Extraction-Processing\Patient_tracking"
{err}unable to change to C:\Users\Lily Alexander\Dropbox\ALL LIFE THINGS\INSP\Work with Sergio\GHCC\Post-Extraction-Processing\Patient_tracking
{txt}{search r(170), local:r(170);}

end of do-file

{search r(170), local:r(170);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}(note: file temp_dta/costs.dta not found)
file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         
.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}(note: file temp_dta/study_attributes.dta not found)
file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         
.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}{err}{p 0 4 2}
variable{err} id
does not uniquely identify observations in the
using data
{p_end}
{txt}{search r(459), local:r(459);}

end of do-file

{search r(459), local:r(459);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         
. 
{txt}end of do-file

{com}. br

. tab ar_narrow

                 {txt}ar_narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
               admin_equip {c |}{res}          2       20.00       20.00
{txt}               consumables {c |}{res}          2       20.00       40.00
{txt}        full costing total {c |}{res}          2       20.00       60.00
{txt}    patient transportation {c |}{res}          2       20.00       80.00
{txt}          service delivery {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' capa_admin_equip
{txt}  3{com}.                                 {c )-}
{err}variable {bf}capa_admin_equip{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' capa_admin_equip
{txt}  3{com}.                                 {c )-}
{err}variable {bf}capa_admin_equip{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
{txt}end of do-file

{com}. br

. br

. tab si_narrow

                              {txt}si_narrow {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
                    nonmed_int_supplies {c |}{res}          4       40.00       40.00
{txt}                                  other {c |}{res}          2       20.00       60.00
{txt}                       service_delivery {c |}{res}          2       20.00       80.00
{txt}                        unit cost total {c |}{res}          2       20.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}         10      100.00

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 25 October 2017
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{err}variable {bf}capital{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic unit_obs empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{err}variable {bf}unit_obs{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. br unit

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost output_quantity time_period_mo{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{err}type mismatch
{txt}{search r(109), local:r(109);}

end of do-file

{search r(109), local:r(109);}

{com}. br  lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost output_quantity time_period_mo

. 
. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs incremental_costing_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{err}variable {bf}incremental_costing_rs{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
{txt}  4{com}.                                 destring `i', replace
{txt}  5{com}.                                 {c )-}
{err}type mismatch
{txt}{search r(109), local:r(109);}

end of do-file

{search r(109), local:r(109);}

{com}. br start_year end_year year_intro ref_year

. 
. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}.                                 
.                         *Period portrayed
.                         replace period_portrayed=lower(period_portrayed)
{err}type mismatch
{txt}{search r(109), local:r(109);}

end of do-file

{search r(109), local:r(109);}

{com}. br period*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}.                                 
.                         
.                 * Exchange Rate
.                         replace current_x_rate= lower(current_x_rate)
{err}type mismatch
{txt}{search r(109), local:r(109);}

end of do-file

{search r(109), local:r(109);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}.                         
.                 * number of sites
.                         replace no_sites="." if no_sites=="N/A" | no_sites=="NR"
{err}type mismatch
{txt}{search r(109), local:r(109);}

end of do-file

{search r(109), local:r(109);}

{com}. br no*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 /*
>                         * And binaries for facility_type
>                         tab fac_type, gen(v_)
>                                 rename v_1 ft_clinics
>                                 rename v_2 ft_intclinics
>                                 rename v_3 ft_hospitals
>                                 rename v_4 ft_unspecified_hc
>                                 rename v_5 ft_mobile_outreach
>                                 rename v_6 ft_poplevel
>                                 rename v_7 ft_other
>                                         // note not appropriate for other intervention types
>                                 
>                         * And binaries for faclity_category
>                         tab facility_cat, gen(v_)
>                                 rename v_1 health_post
>                                 rename v_2 health_center
>                                 rename v_3 hospital_clinic
>                                 rename v_4 primary_hosptial
>                                 rename v_5 tertiary_hospital
>                                 rename v_6 unspec_hospital
>                                 rename v_7 mixed_healthfac
>                                 rename v_8 unspecified_healthfac
>                                 rename v_9 mobile_clinic
>                                 rename v_10 temp_site
>                                 rename v_11 camp
>                                 rename v_12 pop_level
>                                 rename v_13 other_facility
>                                 rename v_14 type_nr
>                                 
>                                 ** Try adding both to the models to see how it might differ.
>         
>         * Do I need to destring or recode: id_details; id_phase; 
>         
>         
>         * Save progress
>         save temp_dta/study_attributes.dta,replace      
>         
> 
> *************************************************************************
> * Part II
> * Above, everything from cost_data sheet is encoded and ready for merging
> * Below, we create two separate datasets for analysis
> *               1. Long DS with each row = cost input, combined with study level data
> *               2. Wide DS with each row as a study, collapsed and combined with study level data
> *************************************************************************
> 
> 
>         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
>         *************************************************************************
>         
>         clear
>         use temp_dta/costs.dta
>                 drop ar_capital-a_secsd_hct
>         merge m:1 id using temp_dta/study_attributes.dta
>                 order extractor_initials-consistency_rmk
>                 order id
>                                 drop if _merge!=3
>                                 drop _merge
>         
>                                 save final_dta/long_file.dta, replace
>                                 *This dataset may require some additional cleaning and culling for appropriate use
>                                 
>         * II.2 - Create Wide Dataset (collapse by unit_cost and add study_attributes data)
>         **********************************************************************************
>         clear
>         use temp_dta/costs.dta
> 
>         
>         * First set up the desired order of the collapsed cost variable with markers
>                         *Broad as reported costs
>                                 gen broad_asreported=.
>                                 move broad_asreported ar_capital
>                         *Narrow as reported costs
>                                 gen narrow_asreported=.
>                                 move narrow_asreported ar_cap_medical_equipment
>                         
>                         *Broad Standardized Input costs
>                                 gen broad_stdinput=.
>                                 move broad_stdinput si_capital
>                         * Narrow Standardized Input costs
>                                 gen narrow_stdinput=.
>                                 move narrow_stdinput si_cap_medical_equip
>                         
>                                 
>                         *Broad Activity Costs
>                                 gen broad_activity=.
>                                 move broad_activity a_ancillary
>                 
>                         * Narrow Activity costs
>                                 gen narrow_activity=.
>                                 move narrow_activity a_anc_demand_generation
>                         
>         
>                         save temp_dta/costs.dta, replace
> 
> 
> 
>                 * Collapse for reshape wide 
>                 * (here, in two parts,  1) collapse cost variables, and 
>                 *                                               2) remove non-total rows for all categorical variables).
>                 ************************************************************************************
> 
>                         *1. Collapse cost variables into new dataset
>                         *Need to collapse one var at a time and append to a new dataset
>                                 collapse broad_asreported, by (unit_cost)
>                                 save temp_dta/costs_temp.dta,replace
>                                         clear
>                                         use temp_dta/costs.dta
>                                 *set trace on
>                                 foreach i of varlist ar_capital-a_secsd_hct {c -(}
>                                                 bysort unit_cost (`i') : gen miss = mi(`i'[1])
>                                                 collapse (sum) `i' (min) miss, by (unit_cost)
>                                                 replace `i'=. if miss==1
>                                                         drop miss
>                                                 merge 1:1 unit_cost using temp_dta/costs_temp.dta
>                                                         drop _merge
>                                                         save temp_dta/costs_temp.dta,replace
>                                                                 clear
>                                                 use temp_dta/costs.dta
>                                                 {c )-}
>                                                 *
>                         *2. Now collapse all of the categorical variables just by total
>                                 drop ar_capital-a_secsd_hct
>                                 keep if ar_narrow1=="full costing total" | ar_narrow1=="partial costing"
>                                         save temp_dta/c_categoricals.dta,replace
>                                         merge m:1 unit_cost using temp_dta/costs_temp.dta
>                                                         drop if _merge!=3
>                                                                         * In this case, drops 6 that we dont want anyway
>                                                         drop _merge
>                                                         
>                                 * reorder for ease of finding 
>                                 * (This could be done in a better way, problem is the above procedure reverses the order)       
>                                 order id unit_cost broad_asreported ar_broad ar_capital ar_facility ar_overhead ar_personnel ar_recurring_goods ar_recurring_services ar_subtotal ar_total ar_unspecified ar_narrow narrow_asreported ar_cap_medical_equipment ar_cap_non_consumable_supplies ar_cap_non_medical_equipment ar_cap_unspecified ar_fac_building ar_fac_maint_and_util ar_fac_rental ar_fac_waste_management ar_ove_unspecified ar_per_admin_support ar_per_nurses ar_per_physicians ar_per_service_delivery ar_per_unspecified ar_recgoods_clinical_consumables ar_recgoods_consumables ar_recgoods_nclinical_consum ar_recservices_hct ar_recservices_adverse_events ar_recservices_consultancy ar_recservices_demand_generation ar_recservices_inpatient ar_recservices_lab_test ar_recservices_mgmt ar_recservices_sterilization ar_recservices_supply_chain ar_recservices_training ar_recservices_transport ar_sub_subtotal ar_tot_full_costing_total ar_tot_partial_costing ar_uns_unspecified broad_stdinput si_broad si_capital si_mixed si_personnel si_recurrent narrow_stdinput si_narrow si_cap_medical_equip si_cap_nonmed_equip si_cap_other si_mix_mixed si_per_mixed_unspec si_per_service_delivery si_per_support si_rec_building_space si_rec_med_int_supplies si_rec_nonmed_int_supplies broad_activity a_broad a_ancillary a_mixed a_operational a_primary_sd a_secondary_sd narrow_activity a_narrow a_anc_demand_generation a_anc_lab_services a_anc_unspecified a_mix_mixed a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_unspecified a_prisd_circumcision_proced a_prisd_unspecified a_secsd_hct output_pmonth output_pyear output_pyear2 output_pmonth2 output1k_mo output1k_yr output1k_yr2 output1k_mo2      
>                                                         
>                                 * First label organizational variables after resort
>                                 label variable broad_asreported "----------------------------------"
>                                 label variable narrow_asreported "----------------------------------"
>                                 label variable broad_stdinput "----------------------------------"      
>                                 label variable narrow_stdinput "----------------------------------"
>                                 label variable broad_activity "----------------------------------"
>                                 label variable narrow_activity "----------------------------------"
>                         
>                                 * Generate a Unit Cost Total "uc_total"
>                                 move mean_cost ar_broad
>                                 
>                                 * Finally merge in study_attribute dataset
>                                 merge m:1 id using temp_dta/study_attributes.dta
>                                         drop if _merge!=3
>                                                 * In this case it drops the 6 sub-studies that we dont want
>                                                 drop _merge
>                         
>                         
>                         *Final cleaning and creation of organizational variables
>                         *********************************************************
>                         drop cost_record subset_of ar_narrow1 ar_broad1 si_narrow1 si_broad1 a_narrow1 a_broad1
>                         
>                         gen COVARIATES=.
>                         move COVARIATES output_pmonth
>                         label variable COVARIATES "----------------------------------"
>                         
>                         gen output_vars=.
>                         move output_vars output_pmonth
>                         label variable output_vars "----------------------------------"
>                         
>                         * Save version before importing GDPPC data:
>                         save final_dta/wide_file.dta, replace
>                         
>                         * Finally, import GDPPC data for each study.
>                         ********************************************
>                                 * Underlying dataset can be found at https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
>                                 * Simply download EXCEL file option for ALL countries (should be default). 
>                                 * Download for this presentation was done on 25 October 2017
>                                 * File name is: API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls
>                                 * place file in path along with data extraction template
>                                 * Presumably formatting for this file shouldnt change year-to-year, but possible 
>                                 * ...so check that import and file manipulation commands below work. 
>                 
>                         save "C:\Users\Lily Alexander\Dropbox\ALL LIFE THINGS\INSP\Work with Sergio\GHCC\Post-Extraction-Processing\VMMC\VMMC_wide_file_Feb2018.dta", replace
>                         clear
> 
>         *Change directory to pull in outside data
>         cd "/Users/dcameron03/Documents/Berkeley/`GSI with Jim/Stata/GHCC/"
>                         
>                         import excel "API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls", firstrow sheet("Data") cellrange(A4) case(l)
>                                                 // Years wont translate to varnames, but will be retained as labels for cols e-bi
>                                                 // Need to manually rename the Years row (4) from #### to y####
>                                                 drop countrycode-y1999
>                                 STOP            
>                         *global years y2000-y2016
>                         reshape long y, i(countryname) j(year_d)
>                         rename y gdppc
>                         rename year_d currency_yr
>                         rename countryname country_alt
>                         save VMMC/temp_dta/gdppc.dta, replace
>                         
>                         clear
>                         
>                         *Now merge in the GDPPC data you've created: 
>                         use VMMC/final_dta/wide_file.dta
>                         
>                         merge m:1 country_alt currency_yr using "VMMC/temp_dta/gdppc.dta"
>                                 drop if _merge==2
>                                 drop _merge
>                                 
>                                 
>                         move gdppc country
>                         
>                         
>                         save VMMC/final_dta/wide_file.dta, replace
> 
> * And Binaries and amounts of global fund (GFAMTB) and PEPFAR funding
>         ** For dataset for this process visit: <http://ghdx.healthdata.org/record/development-assistance-health-database-1990-2015>.
>         ** To do this you will need to maintain a string variable with the country names in the same format as the WB country names.
> 
>                         clear
>                         use external_data/IHME_DAH_DATABASE_1990_2015_Y2016M04D25.DTA
> 
>                         * Get rid of unnecessary data
>                                 drop if year<2000
>                                 drop if channel!="BIL_USA" & channel!="GFATM"
>                                 gen hiv_funding=hiv_dah_15+hiv_treat_dah_15+hiv_prev_dah_15+hiv_pmtct_dah_15+hiv_ovc_dah_15+hiv_care_dah_15+hiv_ct_dah_15+hiv_unid_dah_15+hiv_tb_dah_15+hiv_hss_dah_15
>                                 
>                                 gen pepfar=0
>                                         replace pepfar=1 if channel=="BIL_USA" & year>2002 & hiv_funding!=0
>                                         label var pepfar "Country recieved PEPFAR funding y/n"
>                                 
>                                 gen pepfar_amt=0
>                                         replace pepfar_amt=hiv_dah_15 if channel=="BIL_USA" & year>2002 
>                                         label var pepfar_amt "Amnt of PEPFAR funding 2016 USD"
>                                 
>                                 gen global_fund=0
>                                         replace global_fund=1 if dah_15!=0 & channel=="GFATM"
>                                         label var global_fund "Country recieved Global Fund funding y/n"
>                                 
>                                 gen global_fund_amt=0
>                                         replace global_fund_amt=dah_15 if channel=="GFATM"
>                                         label var global_fund_amt "Amnt of GF funding 2016 USD"
>                                 
>                                 keep year recipient_country pepfar pepfar_amt global_fund global_fund_amt
>                                 rename year currency_yr
>                                 rename recipient_country country_alt
>                                 
>                 * Inflate to 2016 dollars using the GDP Price Deflator          
>                 gen gdp_current = 111.416                               
>                                 gen gdp_old=.                           
>                                         replace gdp_old=        66.773  if currency_yr==        1990
>                                         replace gdp_old=        68.996  if currency_yr==        1991
>                                         replace gdp_old=        70.569  if currency_yr==        1992
>                                         replace gdp_old=        72.248  if currency_yr==        1993
>                                         replace gdp_old=        73.785  if currency_yr==        1994
>                                         replace gdp_old=        75.324  if currency_yr==        1995
>                                         replace gdp_old=        76.699  if currency_yr==        1996
>                                         replace gdp_old=        78.012  if currency_yr==        1997
>                                         replace gdp_old=        78.859  if currency_yr==        1998
>                                         replace gdp_old=        80.065  if currency_yr==        1999
>                                         replace gdp_old=        81.887  if currency_yr==        2000
>                                         replace gdp_old=        83.754  if currency_yr==        2001
>                                         replace gdp_old=        85.039  if currency_yr==        2002
>                                         replace gdp_old=        86.735  if currency_yr==        2003
>                                         replace gdp_old=        89.12   if currency_yr==        2004
>                                         replace gdp_old=        91.988  if currency_yr==        2005
>                                         replace gdp_old=        94.814  if currency_yr==        2006
>                                         replace gdp_old=        97.337  if currency_yr==        2007
>                                         replace gdp_old=        99.246  if currency_yr==        2008
>                                         replace gdp_old=        100             if currency_yr==        2009
>                                         replace gdp_old=        101.221 if currency_yr==        2010
>                                         replace gdp_old=        103.311 if currency_yr==        2011
>                                         replace gdp_old=        105.214 if currency_yr==        2012
>                                         replace gdp_old=        106.913 if currency_yr==        2013
>                                         replace gdp_old=        108.832 if currency_yr==        2014
>                                         replace gdp_old=        110.012 if currency_yr==        2015
>                                                                 
>                                         replace global_fund_amt=global_fund_amt*(gdp_current/gdp_old)           
>                                         replace pepfar_amt=pepfar_amt*(gdp_current/gdp_old)     
>                                                 drop gdp_current gdp_old
>                                 collapse (sum) pepfar_amt global_fund_amt (max) pepfar global_fund, by(country_alt currency_yr)
>                                 
>                                 save VMMC/temp_dta/pepfar_gf_data.dta, replace
>                                 clear
>                                 use VMMC/final_dta/wide_file.dta
>                                 
>                                 merge m:1 country_alt currency_yr using "VMMC/temp_dta/pepfar_gf_data.dta"
>                                         drop if _merge==2
>                                         * There are problems here because missing data for South Africa (2014) and Zimbabwe (2014, 2015)
>                                         * Will need to check for other missing values by looking at data that didnt merge from master. 
>                                                 *Based on patterns, I assume:
>                                                 replace pepfar=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace pepfar=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 drop _merge
>                                                 drop country_alt
>                                                 
>                         save VMMC/final_dta/wide_file.dta, replace                                              
> 
>         STOP
>                         
>         *** Finally, also add in the line that saves a copy of ART to the GitHub folder for Lily to see it                      
>         cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
>         save VMMC_wide_file.dta, replace                
>                                 
>                                 
>                                 
> ** STOP HERE                    
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
> ********************************************************************************************************
> ********************************************************************************************************                        
> **** THE CLEANING PROCEDURE STOPS HERE> EVERYTHING BELOW IS FROM OLDER DO FILES OR FOR MY OWN REFERENCE
> ********************************************************************************************************                        
> ********************************************************************************************************                        
>         
>         /*
>                         * Use this procedure to see that the new categories add up to 
>                         * at least ABOUT the same amount as the mean_cost (as there will be
>                         * minor discrepancies in reporting based on rounding and extrapolation)
> 
>                         
>                         * AR Broad
>                                 move ar_unspecified ar_total
>                                 egen ar_b_totes=rowtotal(ar_capital-ar_unspecified)
>                                 move ar_b_totes mean_cost
>                         * AR NARROW
>                                 move ar_uns_unspecified ar_sub_subtotal
>                                 egen ar_n_totes=rowtotal(ar_cap_medical_equipment-ar_uns_unspecified)
>                                 
>                         
>                         *SI BROAD
>                                 egen si_b_totes=rowtotal(si_capital-si_recurrent)
>                                 move si_b_totes mean_cost
>                                 
>                 
>                         * SI NARROW
>                                 egen si_n_totes=rowtotal(si_cap_medical_equip-si_rec_nonmed_int_supplies)
>                                 move si_n_totes mean_cost
>                         
>                         
>                         *A_BROAD
>                                 egen a_b_totes=rowtotal(a_ancillary-a_secondary_sd)
>                                 move a_b_totes mean_cost
>                         
>                         *A_Narrow
>                                 egen a_n_totes=rowtotal(a_anc_demand_generation-a_secsd_hct)
>                                 move a_n_totes mean_cost
>                 
>                 *First round (Rounding dollar values to nearest cent)
>                 
>                 gen blah = round(ar_b_totes,.01)
>                 
>                 foreach i of varlist ar_b_totes si_b_totes si_n_totes a_b_totes a_n_totes {c -(}
>                         gen `i'_1 = round(`i',0.01)
>                         move `i'_1 `i'
>                         drop `i'
>                         rename `i'_1 `i'
>                         replace `i'=. if `i'==0
>                 {c )-}
>                 
> 
>                 
>                         ** NEED TP:
>                                 
>                                 *2. fix up the additional cost stuff
>                                         * Looks like these variables apply to specific inputs, but are not possible to aggregate in wide file
>                                         
>                                         
>                                         
>                                         
> * Drop those unnecessary variables (unless there's need to keep this)
> * drop ar_narrow1 ar_broad1 si_narrow1 si_broad1 a_narrow1 a_broad1             
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
>                                         
> ** Stuff thats probably not necessary
> *************************************   
>                                         
> *And reorder variables appropriately (need to add in reorder of cost variables)
> order broad_categories capital_costs environment facility overhead patient_costs personnel recurring_goods recurring_goods_non_traded recurring_goods_traded recurring_services subtotal total training sub_categories capital_costs_sub capc_furnishings capc_medical_equipment capc_na capc_non_consumable_supplies capc_non_medical_equipment capc_start_up capc_unspecified capc_unspecified_equipment capc_vehicles environment_sub env_na facility_sub fac_building fac_facility_maintenance fac_facility_rental fac_management fac_unspecified fac_utilities overhead_sub ove_na ove_off_site ove_on__or_off_site_unspecified ove_on_site ove_recurring_services pat_costs_sub patc_indirect_costs personnel_sub per_administration per_direct_service_delivery per_management per_na per_unspecified recurring_goods_sub recg_clinical_consumables recg_fuel recg_na recg_non_clinical_consumables recg_pharmaceuticals recg_unspecified r_goods_ntraded_sub recgnt_medical_consultation recgnt_recurring_services r_goods_traded_sub recgt_clinical_consumables recurring_services_sub recs_commodity_distribution recs_demand_generation recs_equipment_maintenance recs_hiv_counseling_and_testing recs_inpatient_service recs_laboratory_test recs_medical_consultation recs_na recs_transportation recs_unspecified training_sub tra_na subtotal_sub sub_na total_sub tot_full_costing_total tot_na tot_partial_costing_total
> 
> *Stick these in front (there's gotta be a better way to do this)
> order substudyid unit_cost cost_record disease intervention cap_recurring activity_cat input_broad_cat input_broad_cat1 input_narrow_cat input_narrow_cat1 subset_of cost_details core_input output_unit_reported output_unit output_unit2 integrated_generic mean_cost lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr direct_obs unit_obs input_price input_quantity input_type timeframe program_level_cost output_quantity time_period_mo source cost_remarks pot_distortions pot_distortions_rs adjustments timeframe_rmrk empirical_modeled cost_source cost_source_rs cost_allocation_method cost_allocation_method_rs resource_id resource_id_rs resource_valuation resource_valuation_rs price_sources price_sources_rs inputq_source inputq_source_rs full_subsidized full_subsidized_rs adjustment_method adjustment_method_rs data_collection data_collection_rs recall_period recall_period_rs output_methods output_methods_rs data_timing data_timing_rs inflation inflation_rs inflation_method inflation_method_rs amortization amortization_rs methods_rmrk currency_iso currency_name currency_rs
>         
>         *And rename organizational variables
>                 label var sub_categories "-------------------------------------------------"
>                 label var broad_categories "-------------------------------------------------"
>                 label var capital_costs_sub "-------------------------------------------------"
>                 label var facility_sub "-------------------------------------------------"
>                 label var overhead_sub "-------------------------------------------------"
>                 label var pat_costs_sub "-------------------------------------------------"
>                 label var personnel_sub "-------------------------------------------------"
>                 label var recurring_goods_sub "-------------------------------------------------"
>                 label var r_goods_traded_sub "-------------------------------------------------"
>                 label var r_goods_ntraded_sub "-------------------------------------------------"
>                 label var recurring_services_sub "-------------------------------------------------"
>                 label var training_sub "-------------------------------------------------"
>                 label var environment_sub "-------------------------------------------------"
>                 label var subtotal_sub "-------------------------------------------------"
>                 label var total_sub "-------------------------------------------------"
> 
>                 save temp_dta/costlevel_wide.dta,replace
>                 
>                 clear
>                 
>                 
>                 
> 
> 
> 
> *Labels and globals for organization
> ************************************
>         * Global for new cost items
>                 global costs capital_costs-tra_na
>                 
>         *Broad cats
>         gen broad_categories=. 
>         label var broad_categories "-------------------------------------------------"
>         move broad_categories capital_costs
> 
>         *Sub cats
>         gen sub_categories=.
>         label var sub_categories "-------------------------------------------------"
>         move sub_categories capc_furnishings
> 
>         *Individual subs
>                 * Capital costs
>                 gen capital_costs_sub=.
>                 label var capital_costs_sub "-------------------------------------------------"
> 
>                 * Facility
>                 gen facility_sub=.
>                 label var facility_sub "-------------------------------------------------"
> 
>                 * Overhead
>                 gen overhead_sub=.
>                 label var overhead_sub "-------------------------------------------------"
> 
>                 * Patient Costs
>                 gen pat_costs_sub=.
>                 label var pat_costs_sub "-------------------------------------------------"
> 
>                 * Personnel
>                 gen personnel_sub=.
>                 label var personnel_sub "-------------------------------------------------"
> 
>                 * Recurring Goods
>                 gen recurring_goods_sub=.
>                 label var recurring_goods_sub "-------------------------------------------------"
> 
>                 * Recurring Goods Traded
>                 gen r_goods_traded_sub=.
>                 label var r_goods_traded_sub "-------------------------------------------------"
> 
>                 * Recurring Goods Non Traded
>                 gen r_goods_ntraded_sub=.
>                 label var r_goods_ntraded_sub "-------------------------------------------------"
> 
>                 * Recurring Services
>                 gen recurring_services_sub=.
>                 label var recurring_services_sub "-------------------------------------------------"
> 
>                 * Training
>                 gen training_sub=.
>                 label var training_sub "-------------------------------------------------"
> 
>                 * Environment
>                 gen environment_sub=.
>                 label var environment_sub "-------------------------------------------------"
>                         
>                 * Subtotal
>                 gen subtotal_sub=.
>                 label var subtotal_sub "-------------------------------------------------"
>                         
>                 * Total
>                 gen total_sub=.
>                 label var total_sub "-------------------------------------------------"
> 
>                 global org capital_costs_sub-total_sub
>                 
> * Apply sub-area organizational labels based on first three letters of?
>         *Not sure how to do this, will have to revisit later.
> 
>         move capital_costs_sub capc_furnishings
>         move environment_sub env_na
>         move facility_sub fac_building
>         move overhead_sub ove_na
>         move pat_costs_sub patc_indirect_costs
>         move personnel_sub per_administration
>         move recurring_goods_sub recg_clinical_consumables
>         move r_goods_ntraded_sub recgnt_medical_consultation
>         move r_goods_traded_sub recgt_clinical_consumables
>         move recurring_services_sub recs_commodity_distribution
>         move training_sub tra_na
>         move subtotal_sub sub_na
>         move total_sub tot_full_costing_total
>         move training_sub subtotal_sub
>         move tra_na subtotal_sub
>   
>         
> *And reorder variables appropriately
> order substudyid unit_cost cost_record disease intervention cap_recurring activity_cat input_broad_cat input_broad_cat1 input_narrow_cat input_narrow_cat1 subset_of cost_details core_input output_unit_reported output_unit output_unit2 integrated_generic mean_cost lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr direct_obs unit_obs input_price input_quantity input_type timeframe program_level_cost output_quantity time_period_mo source cost_remarks pot_distortions pot_distortions_rs adjustments timeframe_rmrk empirical_modeled cost_source cost_source_rs cost_allocation_method cost_allocation_method_rs resource_id resource_id_rs resource_valuation resource_valuation_rs price_sources price_sources_rs inputq_source inputq_source_rs full_subsidized full_subsidized_rs adjustment_method adjustment_method_rs data_collection data_collection_rs recall_period recall_period_rs output_methods output_methods_rs data_timing data_timing_rs inflation inflation_rs inflation_method inflation_method_rs amortization amortization_rs methods_rmrk currency_iso currency_name currency_rs
>         
>         
>         save temp_dta/costs.dta,replace 
> 
>         
>         
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
> 
> 
> *****************************************************************************   
> 
> 
> 
> * save temp_dta/study_attributes.dta,replace
> 
> ********************************************
> * Merge together with cost-level subdataset:
> ********************************************
> 
>         *Create studyid for analysis
>                 gen studyid=substr(substudyid,1,6)
>                 move studyid extractor_initials
> 
>  *merge together three data files
>                 merge 1:m substudyid using temp_dta/costlevel_wide.dta
>                                 * Three lines that were not totals get dropped from the analysis
>                         drop if _merge!=3
>                         drop _merge
> 
>                         
> 
> 
> STOP HERE
>  
>  * Stuff to deal with above:
>  * Counterfacutals no longer exists, need to replace
>  * Also should do all load in of data from extraction sheet in the first few lines so I dont forget
>  *   which sheets I'm importing from later on in the do file. Quick fix, needs standardized
>  * Keep cleaning this up and try getting rid of crap that doesn't help
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
>  
> 
> ********************************************************************************
> *PRIOR CLEANING (use this only as useful).
> 
> 
> 
> 
> *Finish with
> 
> 
> 
> 
> 
>         
>                 
>                 
>                 
> 
> stop
> 
> 
> /*
>         
> 
> * Drop unnecessary variables for export to Will (fix later when actual variables desired have been determined)
> ************************************************
> drop disease-activity_cat
> drop input_broad_cat
> drop inputnarrowcat-integrated_generic
> drop lower_ci-_
> */
> 
>                         
> /*
> 
> 
> * Capital costs
> gen capital_costs_sub=.
> label var capital_costs_sub "-------------------------------------------------"
> 
> gen cc_admin_equipment=.
>         replace cc_admin_equipment=capital_costs if capital_costs==1
> gen cc_furnishings=.
>         replace cc_furnishings=capital_costs if capital_costs==2
> gen cc_lab_equipment=. 
>         replace cc_lab_equipment=capital_costs if capital_costs==3
> gen cc_med_equipment=.  
>         replace cc_med_equipment=capital_costs if capital_costs==4
> gen cc_non_consumables=.
>         replace cc_non_consumables=capital_costs if capital_costs==5
> gen cc_non_med_equipment=. 
>         replace cc_non_med_equipment=capital_costs if capital_costs==6
> gen cc_start_up=.
>         replace cc_start_up=capital_costs if capital_costs==7
> gen cc_vehicles=. 
>         replace cc_vehicles=capital_costs if capital_costs==8
> gen cc_unspecified=. 
>         replace cc_unspecified=capital_costs if capital_costs==9
> gen cc_unspecified_equip=.
>         replace cc_unspecified_equip=capital_costs if capital_costs==10
> gen cc_na=.
>         replace cc_na=capital_costs if capital_costs==11
> 
> foreach i of varlist cc_admin_equipment-cc_na {c -(}
> replace `i'=mean_cost if `i'!=.
> 
> {c )-}
> 
> 
> 
> * Facility
>         gen facility_sub=.
>         label var facility_sub "-------------------------------------------------"
>         gen fac_building=.
>                 replace fac_building=facility if facility==1
>         gen fac_maintenance=.
>                 replace fac_maintenance=facility if facility==2
>         gen fac_rental=.
>                 replace fac_rental=facility if facility==3
>         gen fac_management=.
>                 replace fac_management=facility if facility==4
>         gen fac_unspecified=.
>                 replace fac_unspecified=facility if facility==5
>         gen fac_utilities=.
>                 replace fac_utilities=facility if facility==6
> 
>         foreach i of varlist fac_building-fac_utilities {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
> 
> 
> * Overhead
>         gen overhead_sub=.
>         label var overhead_sub "-------------------------------------------------"
>         gen oh_off_site=.
>                 replace oh_off_site=overhead if overhead==1
>         gen oh_onandoff_site=.
>                 replace oh_onandoff_site=overhead if overhead==2
>         gen oh_onoroff_site=.
>                 replace oh_onoroff_site=overhead if overhead==3
>         gen oh_unspecified=.
>                 replace oh_unspecified=overhead if overhead==4
>         gen oh_on_site=.
>                 replace oh_on_site=overhead if overhead==5
>         gen oh_recurring_services=.
>                 replace oh_recurring_services=overhead if overhead==6
>         gen oh_na=.
>                 replace oh_na=overhead if overhead==7
>         foreach i of varlist oh_off_site-oh_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
>                 
> * Patient Costs
>         gen pat_costs_sub=.
>         label var pat_costs_sub "-------------------------------------------------"
>         gen pc_indirect_costs=.
>                 replace pc_indirect_costs=patient_costs if patient_costs==1
>         gen pc_lost_income=.
>                 replace pc_lost_income=patient_costs if patient_costs==2
>         gen pc_service_fee=.
>                 replace pc_service_fee=patient_costs if patient_costs==3
>         gen pc_travel_expenses=.
>                 replace pc_travel_expenses=patient_costs if patient_costs==4
>         gen pc_na=.
>                 replace pc_na=patient_costs if patient_costs==5
>         foreach i of varlist pc_indirect_costs-pc_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
>                 
> * Personnel
>         gen personnel_sub=.
>         label var personnel_sub "-------------------------------------------------"
>         gen p_administration=.
>                 replace p_administration=personnel if personnel==1
>         gen p_counselors=.
>                 replace p_counselors=personnel if personnel==2
>         gen p_dir_serv_deliv=.
>                 replace p_dir_serv_deliv=personnel if personnel==3
>         gen p_management=.
>                 replace p_management=personnel if personnel==4
>         gen p_unspecified=.
>                 replace p_unspecified=personnel if personnel==5
>         gen p_na=.
>                 replace p_na=personnel if personnel==6
> 
>         foreach i of varlist p_administration-p_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
> 
> * Recurring Goods
>         gen recurring_goods_sub=.
>         label var recurring_goods_sub "-------------------------------------------------"
>         gen rg_c_consumables=.
>                 replace rg_c_consumables=recurring_goods if recurring_goods==1
>         gen rg_fuel=.
>                 replace rg_fuel=recurring_goods if recurring_goods==2
>         gen rg_water=.
>                 replace rg_water=recurring_goods if recurring_goods==3
>         gen rg_nc_consumables=.
>                 replace rg_nc_consumables=recurring_goods if recurring_goods==4
>         gen rg_pharmaceuticals=.
>                 replace rg_pharmaceuticals=recurring_goods if recurring_goods==5
>         gen rg_unspecified=.
>                 replace rg_unspecified=recurring_goods if recurring_goods==6
>         gen rg_na=.
>                 replace rg_na=recurring_goods if recurring_goods==7
> 
>         foreach i of varlist rg_c_consumables-rg_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
>                 
> * Recurring Goods Traded
>         gen r_goods_traded_sub=.
>         label var r_goods_traded_sub "-------------------------------------------------"
>         gen rgt_c_consumables=.
>                 replace rgt_c_consumables=recurring_goods_traded if recurring_goods_traded==1
>         gen rgt_nc_consumables=.
>                 replace rgt_nc_consumables=recurring_goods_traded if recurring_goods_traded==2
>         gen rgt_pharmaceuticals=.
>                 replace rgt_pharmaceuticals=recurring_goods_traded if recurring_goods_traded==3
>         gen rgt_u_consumables=.
>                 replace rgt_u_consumables=recurring_goods_traded if recurring_goods_traded==4
> 
>         foreach i of varlist rgt_c_consumables-rgt_u_consumables {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
>                 
> * Recurring Goods Non Traded
>         gen r_goods_ntraded_sub=.
>         label var r_goods_ntraded_sub "-------------------------------------------------"
> 
>         gen rgnt_advertising=.
>                 replace rgnt_advertising=recurring_goods_non_traded if recurring_goods_non_traded==1
>         gen rgnt_med_consultation=.
>                 replace rgnt_med_consultation=recurring_goods_non_traded if recurring_goods_non_traded==2
>         gen rgnt_recurring_services=.
>                 replace rgnt_recurring_services=recurring_goods_non_traded if recurring_goods_non_traded==3
>         gen rgnt_research_tools=.
>                 replace rgnt_research_tools=recurring_goods_non_traded if recurring_goods_non_traded==4
>         gen rgnt_na=.
>                 replace rgnt_na=recurring_goods_non_traded if recurring_goods_non_traded==5
>                 
>         foreach i of varlist rgnt_advertising-rgnt_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
> 
> * Recurring Services
>         gen recurring_services_sub=.
>         label var recurring_services_sub "-------------------------------------------------"
>         gen rs_commodity_distrib=.
>                 replace rs_commodity_distrib=recurring_services if recurring_services==1
>         gen rs_consultancy=.
>                 replace rs_consultancy=recurring_services if recurring_services==2
>         gen rs_demand_generation=.
>                 replace rs_demand_generation=recurring_services if recurring_services==3
>         gen rs_equipment_maintenance=.
>                 replace rs_equipment_maintenance=recurring_services if recurring_services==4
>         gen rs_food_service=.
>                 replace rs_food_service=recurring_services if recurring_services==5
>         gen rs_inpatient_service=.
>                 replace rs_inpatient_service=recurring_services if recurring_services==6
>         gen rs_lab_test=.
>                 replace rs_lab_test=recurring_services if recurring_services==7
>         gen rs_med_consult=.
>                 replace rs_med_consult=recurring_services if recurring_services==8
>         gen rs_med_imaging=.
>                 replace rs_med_imaging=recurring_services if recurring_services==9
>         gen rs_transport=.
>                 replace rs_transport=recurring_services if recurring_services==10
>         gen rs_unspecified=.
>                 replace rs_unspecified=recurring_services if recurring_services==11
>         gen rs_na=.
>                 replace rs_na=recurring_services if recurring_services==12
>                 
>         foreach i of varlist rs_commodity_distrib-rs_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
> 
> * Training
>         gen training_sub=.
>         label var training_sub "-------------------------------------------------"
>         gen tr_na=.
>                 replace tr_na=training if training==1
>         replace tr_na=mean_cost if tr_na!=.
> 
> * Environment
>         gen environment_sub=.
>         label var environment_sub "-------------------------------------------------"
>         gen env_na=.
>                 replace env_na=environment if environment==1
>         replace env_na=mean_cost if env_na!=.
> 
> * Subtotal
>         gen subtotal_sub=.
>         label var subtotal_sub "-------------------------------------------------"
>         gen st_na=.
>                 replace st_na=subtotal if subtotal==1
>         replace st_na=mean_cost if st_na!=.
> 
> * Total
>         gen total_sub=.
>         label var total_sub "-------------------------------------------------"
> 
>         gen t_full_costing=.
>                 replace t_full_costing=total if total==1
>         gen t_partial_costing=.
>                 replace t_partial_costing=total if total==2
>         gen t_na=.
>                 replace t_na=total if total==3
>                 
>         foreach i of varlist t_full_costing-t_na {c -(}
>         replace `i'=mean_cost if `i'!=.
>         {c )-}
> */
> 
> 
> 
> 
> 
> 
> *****START AGAIN AROUND ABOUT HERE
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         ** Now reshape dataset
> **********************
> 
> *and reshape wide by cost within each subcategory 
> drop if mean_cost==.
> 
> *reshape wide capital_costs-meancost2015, i(studyid) j(costrecord) s
> *cant do this, intead have to collapse by siteid, and for broad categories need to collapse by sum, narrow categories should only have one observation per category for each siteid, so those will be fine, and the broad categories will be combined for each siteid as a sum. Also subtotals will equal totals (which could be confusing, so should drop subtotals as a broad category, and only have as subcategories)
> 
> 
> 
> /*
> *First create globals
>                 *`broad'
>                 global broad capital_costs_1 facility_1 overhead_1 patient_costs_1 personnel_1 recurring_goods_1 recurring_goods_traded_1 recurring_goods_non_traded_1 recurring_services_1 training_1 environment_1 subtotal_1 total_1
>                 *'capital_costs'
>                 global capital_costs cc_admin_equipment cc_furnishings cc_lab_equipment cc_med_equipment cc_non_consumables cc_non_med_equipment cc_start_up cc_vehicles cc_unspecified cc_unspecified_equip cc_na
> 
>                 *`facility'
>                 global facility fac_building-fac_utilities
> 
>                 *`overhead'
>                 global overhead oh_off_site oh_onandoff_site oh_onoroff_site oh_unspecified oh_on_site oh_recurring_services oh_na
> 
>                 *`patient_costs'
>                 global patient_costs pc_indirect_costs pc_lost_income pc_service_fee pc_travel_expenses pc_na
> 
>                 *`personnel'
>                 global personnel p_administration p_counselors p_dir_serv_deliv p_management p_unspecified p_na
> 
>                 *`recurring_goods'
>                 global recurring_goods rg_c_consumables rg_fuel rg_water rg_nc_consumables rg_pharmaceuticals rg_unspecified rg_na
> 
>                 *`r_goods_traded'
>                 global r_goods_traded rgt_c_consumables rgt_nc_consumables rgt_pharmaceuticals rgt_u_consumables
> 
>                 *`r_goods_ntraded'
>                 global r_goods_ntraded rgnt_advertising rgnt_med_consultation rgnt_recurring_services rgnt_research_tools rgnt_na
> 
>                 *`recurring_services'
>                 global recurring_services rs_commodity_distrib rs_consultancy rs_demand_generation rs_equipment_maintenance rs_food_service rs_inpatient_service rs_lab_test rs_med_consult rs_med_imaging rs_transport rs_unspecified rs_na
> 
>                 *`training'
>                 global training tr_na
> 
>                 *`environment'
>                 global environment env_na
> 
>                 *`subtotal'
>                 global subtotal st_na
> 
>                 *`total'
>                 global total t_full_costing t_partial_costing t_na
> 
>                 *`data_organization'
>                 global data_organization broad_categories sub_categories capital_costs_sub facility_sub overhead_sub pat_costs_sub personnel_sub recurring_goods_sub r_goods_traded_sub r_goods_ntraded_sub recurring_services_sub training_sub environment_sub subtotal_sub total_sub
> 
>                 *Might want to do this for collapse depending on shape of data
>                 *sort substudyid
> 
>                 
> * Collapse and reshape wide manually
> ************************************
>         drop cost_record-mean_cost
>         collapse (sum) broad_categories-t_na, by(unit_cost) // this is WRONG!
>                         rename *_1 * 
> 
>                         
>                         
> *fix labels again :(
>                 label var broad_categories "  "
>                         replace broad_categories=.
>                 label var sub_categories "  "
>                         replace sub_categories=.
>                 label var capital_costs_sub "-------------------------------------------------"
>                         replace capital_costs_sub=.
>                 label var facility_sub "-------------------------------------------------"
>                         replace facility_sub=.
>                 label var overhead_sub "-------------------------------------------------"
>                         replace overhead_sub=.
>                 label var pat_costs_sub "-------------------------------------------------"
>                         replace pat_costs_sub=.
>                 label var personnel_sub "-------------------------------------------------"
>                         replace recurring_goods_sub=.
>                 label var recurring_goods_sub "-------------------------------------------------"
>                         replace personnel_sub=.
>                 label var r_goods_traded_sub "-------------------------------------------------"
>                         replace r_goods_traded_sub=.
>                 label var r_goods_ntraded_sub "-------------------------------------------------"
>                         replace r_goods_ntraded_sub=.
>                 label var recurring_services_sub "-------------------------------------------------"
>                         replace recurring_services_sub=.
>                 label var training_sub "-------------------------------------------------"
>                         replace training_sub=.
>                 label var environment_sub "-------------------------------------------------"
>                         replace environment_sub=.
>                 label var subtotal_sub "-------------------------------------------------"
>                         replace subtotal_sub=.
>                 label var total_sub "-------------------------------------------------"
>                         replace total_sub=.
> 
>                 *Fix broad category names
> *                               (DO THIS LATER)
>                 *Re-apply the substudy level ID
>                 gen substudyid=substr(unit_cost,1,7)
>                 move substudyid unit_cost
> 
> * Now save as prep for indiv-level merge
>         save temp_dta/cost_level_temp.dta,replace
> 
>         */
>         
>                         
> * And load in study-level data
>         clear
>         import excel vmmc, firstrow sh("study_level")
> 
>         
>         
>         
> * And make repairs and drop unneeded data
> 
>         drop extractor_initials-ref_author
>         drop journal_etc-study_type
> 
>         *Fix years
>         replace ref_year="." if ref_year=="No Year"
>         destring ref_year, replace
> 
> *Fix countries (at study level)
> 
> *make a loop for all the variables
> replace country = lower(country)
> 
> * Recode country variable
> encode country, generate(country1) label(country)
> move country1 country 
> drop country
> rename country1 country
> 
> 
> stop
> 
> 
>                 * COMMAND 'STRPOS() > 0' MAY BE USEFUL FOR OTHER STRING VARIABLES:
> /*              replace c_kenya=1 if strpos(country, "Kenya") > 0
>                 replace c_lesotho=1 if strpos(country, "Lesotho") > 0
>                 replace c_mozambique=1 if strpos(country, "Mozambique") > 0
>                 replace c_namibia=1 if strpos(country, "Namibia") > 0
>                 replace c_rwanda=1 if strpos(country, "Rwanda") > 0
>                 replace c_south_africa=1 if strpos(country, "South Africa") > 0
>                 replace c_swaziland=1 if strpos(country, "Swaziland") > 0
>                 replace c_tanzania=1 if strpos(country, "Tanzania") > 0
>                 replace c_uganda=1 if strpos(country, "Uganda") > 0
>                 replace c_zambia=1 if strpos(country, "Zambia") > 0
>                 replace c_zimbabwe=1 if strpos(country, "Zimbabwe") > 0
> 
>                 *One location with multiple countries is an average of all the cost estimates from the countries later listed as individual sub-site areas, so we can drop this observation because its double counting
> 
>                 *drop if c_multiple==1
> */
>                 
> 
>                 
>         
> 
>                 
>                 * NEED TO FIX THIS 
> /*              * Facility Category
>                 gen fac_cat=.
>                 replace fac_cat=1 if facility_cat=="CL01"
>                 replace fac_cat=2 if facility_cat=="CL02"
>                 replace fac_cat=3 if facility_cat=="CL03"
>                 replace fac_cat=4 if facility_cat=="CL04"
>                 replace fac_cat=5 if facility_cat=="UC01"
>                 replace fac_cat=6 if facility_cat=="HL01"
>                 replace fac_cat=7 if facility_cat=="HL02"
>                 replace fac_cat=8 if facility_cat=="HL03"
>                 replace fac_cat=9 if facility_cat=="HL04"
>                 replace fac_cat=10 if facility_cat=="MF01"
>                 replace fac_cat=11 if facility_cat=="NC01"
>                 replace fac_cat=99 if facility_cat=="NR"
> 
>                 label define fac_cat 1 "Clinic - stand Alone (not part of larger fac)" 2 "Clinic -  integrated (part of parent facility like hosp)" 3 "Clinic - Mobile" 4 "Clinic - Intervention specific (ex. MMC only)" 5 "Unspecified clinical facility" 6 "Hospital - Primary" 7 "Hospital - Secondary" 8 "Hospital Tertiary" 9 "Hospital - unspecified level" 10 "Mixed Facility" 11 "Non-clinical facility" 99 "Facility type not reported"
> 
>                 label values fac_cat fac_cat
>                 move fac_cat title
>                 drop facility_cat
>                 rename fac_cat facility_cat
> 
> */
> 
> 
> * Scale definition (number of clients served
>                 *Number of clients #1 served (and otherwise)
>                 replace scale1_num="." if scale1_num=="" // need to find this value
>                 replace scale1_num="." if scale1_num=="N/A" | scale1_num=="NR"
>                 destring scale1_num, replace
> 
>                 *Number of clients #2 served (and otherwise)
>                 replace scale2_num="." if scale2_num=="" // need to find this value
>                 replace scale2_num="." if scale2_num=="N/A" | scale2_num=="NR"
>                 destring scale2_num, replace
> 
>                 *Keep these at the end of the study level data file.
>                 move scale1_def title 
>                 move scale1_num title
>                 move scale2_def title
>                 move scale2_num title
> 
> 
> * Scale timeframe unit of measurement
>                 gen scale_timeframe_unit1=.
>                 replace scale_timeframe_unit1=1 if scale_timeframe_unit=="weeks"
>                 replace  scale_timeframe_unit1=2 if scale_timeframe_unit=="month" |  scale_timeframe_unit== "months"
>                 replace scale_timeframe_unit1=3 if scale_timeframe_unit=="year" | scale_timeframe_unit=="year (per facility)"
>                 replace  scale_timeframe_unit1=99 if  scale_timeframe_unit=="N/A"
> 
>                 label define time_frame 1 "weeks" 2 "months" 3 "years" 99 "N/A"
>                 label values scale_timeframe_unit1 time_frame
>         
> * Scale timeframe
>                 tab  scale_timeframe
>                 replace scale_timeframe="." if scale_timeframe=="N/A" | scale_timeframe=="NR"
>                 destring scale_timeframe,replace
> 
> * Create binaries for time frames
>         tab scale_timeframe_unit1, gen(tf_)
>         rename tf_1 weeks
>         rename tf_2 months
>         rename tf_3 years
>         drop tf_4
> 
>         *Weeks
>         replace weeks=scale_timeframe if weeks==1
>         replace weeks=(scale_timeframe*4) if months==1
>         replace weeks=(scale_timeframe*52) if years==1
>         replace weeks=. if weeks==0
>         
>         *Months
>         replace months=scale_timeframe if months==1
>         replace months=(scale_timeframe*12) if years==1
>         replace months=(scale_timeframe/4) if scale_timeframe_unit1==1
>         replace months=. if months==0
>         
>         *Years
>         replace years=scale_timeframe if years==1
>         replace years=(scale_timeframe/12) if scale_timeframe_unit1==2
>         replace years=(scale_timeframe/52) if scale_timeframe_unit1==1
>         replace years=. if years==0
>                 
>         *Move up front 
>         move scale_timeframe title
>         move scale_timeframe_unit1 title
>         move weeks title
>         move months title
>         move years title
> 
> 
> 
> 
> *Period Portrayed
>         replace period_portrayed="." if period_portrayed=="N/A" | period_portrayed=="NR" | period_portrayed=="inferred"
>         destring period_portrayed, replace
>         move period_portrayed ownership
> 
> 
> *Sample size and sample size units
> * Again these are a mess and not standardized, perhaps this needs to be discussed.
>                 move sample_size title
>                 move sample_size_units title
>         
> STOP
> */

{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}. 
{txt}end of do-file

{com}. br

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}.                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.         merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 order extractor_initials-consistency_rmk
{txt}
{com}.                 order id
{txt}
{com}.                                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                 drop _merge
{txt}
{com}.         
.                                 save final_dta/long_file.dta, replace
{txt}(note: file final_dta/long_file.dta not found)
{err}{p 0 4 2}
file final_dta/long_file.dta
could not be opened
{p_end}
{txt}{search r(603), local:r(603);}

end of do-file

{search r(603), local:r(603);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}.                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.         merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 order extractor_initials-consistency_rmk
{txt}
{com}.                 order id
{txt}
{com}.                                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                 drop _merge
{txt}
{com}.         
.                                 save final_dtas/long_file.dta, replace
{txt}(note: file final_dtas/long_file.dta not found)
file final_dtas/long_file.dta saved

{com}.                                 *This dataset may require some additional cleaning and culling for appropriate use
.                                 
.         * II.2 - Create Wide Dataset (collapse by unit_cost and add study_attributes data)
.         **********************************************************************************
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}. 
.         
.         * First set up the desired order of the collapsed cost variable with markers
.                         *Broad as reported costs
.                                 gen broad_asreported=.
{txt}(10 missing values generated)

{com}.                                 move broad_asreported ar_capital
{txt}
{com}.                         *Narrow as reported costs
.                                 gen narrow_asreported=.
{txt}(10 missing values generated)

{com}.                                 move narrow_asreported ar_cap_admin_equip
{txt}
{com}.                         
.                         *Broad Standardized Input costs
.                                 gen broad_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move broad_stdinput si_combined
{txt}
{com}.                                 
.                         * Narrow Standardized Input costs
.                                 gen narrow_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move narrow_stdinput si_com_unit_cost
{txt}
{com}.                         
.                                 
.                         *Broad Activity Costs
.                                 gen broad_activity=.
{txt}(10 missing values generated)

{com}.                                 move broad_activity a_combo
{txt}
{com}.                 
.                         * Narrow Activity costs
.                                 gen narrow_activity=.
{txt}(10 missing values generated)

{com}.                                 move narrow_activity a_com_combo
{txt}
{com}.                         
.         
.                         save temp_dta/costs.dta, replace
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. 
.                 * Collapse for reshape wide 
.                 * (here, in two parts,  1) collapse cost variables, and 
.                 *                                               2) remove non-total rows for all categorical variables).
.                 ************************************************************************************
. 
.                         *1. Collapse cost variables into new dataset
.                         *Need to collapse one var at a time and append to a new dataset
.                                 collapse broad_asreported, by (unit_cost)
{txt}
{com}.                                 save temp_dta/costs_temp.dta,replace
{txt}(note: file temp_dta/costs_temp.dta not found)
file temp_dta/costs_temp.dta saved

{com}.                                         clear
{txt}
{com}.                                         use temp_dta/costs.dta
{txt}
{com}.                                 *set trace on
.                                 foreach i of varlist ar_capital-a_prisd_unspecified {c -(}
{txt}  2{com}.                                                 bysort unit_cost (`i') : gen miss = mi(`i'[1])
{txt}  3{com}.                                                 collapse (sum) `i' (min) miss, by (unit_cost)
{txt}  4{com}.                                                 replace `i'=. if miss==1
{txt}  5{com}.                                                         drop miss
{txt}  6{com}.                                                 merge 1:1 unit_cost using temp_dta/costs_temp.dta
{txt}  7{com}.                                                         drop _merge
{txt}  8{com}.                                                         save temp_dta/costs_temp.dta,replace
{txt}  9{com}.                                                                 clear
{txt} 10{com}.                                                 use temp_dta/costs.dta
{txt} 11{com}.                                                 {c )-}
{txt}(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved

{com}.                                                 *
.                         *2. Now collapse all of the categorical variables just by total
.                                 drop ar_capital-a_secsd_hct
{err}variable {bf}a_secsd_hct{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}.                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.         merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 order extractor_initials-consistency_rmk
{txt}
{com}.                 order id
{txt}
{com}.                                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                 drop _merge
{txt}
{com}.         
.                                 save final_dtas/long_file.dta, replace
{txt}file final_dtas/long_file.dta saved

{com}.                                 *This dataset may require some additional cleaning and culling for appropriate use
.                                 
.         * II.2 - Create Wide Dataset (collapse by unit_cost and add study_attributes data)
.         **********************************************************************************
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}. 
.         
.         * First set up the desired order of the collapsed cost variable with markers
.                         *Broad as reported costs
.                                 gen broad_asreported=.
{txt}(10 missing values generated)

{com}.                                 move broad_asreported ar_capital
{txt}
{com}.                         *Narrow as reported costs
.                                 gen narrow_asreported=.
{txt}(10 missing values generated)

{com}.                                 move narrow_asreported ar_cap_admin_equip
{txt}
{com}.                         
.                         *Broad Standardized Input costs
.                                 gen broad_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move broad_stdinput si_combined
{txt}
{com}.                                 
.                         * Narrow Standardized Input costs
.                                 gen narrow_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move narrow_stdinput si_com_unit_cost
{txt}
{com}.                         
.                                 
.                         *Broad Activity Costs
.                                 gen broad_activity=.
{txt}(10 missing values generated)

{com}.                                 move broad_activity a_combo
{txt}
{com}.                 
.                         * Narrow Activity costs
.                                 gen narrow_activity=.
{txt}(10 missing values generated)

{com}.                                 move narrow_activity a_com_combo
{txt}
{com}.                         
.         
.                         save temp_dta/costs.dta, replace
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. 
.                 * Collapse for reshape wide 
.                 * (here, in two parts,  1) collapse cost variables, and 
.                 *                                               2) remove non-total rows for all categorical variables).
.                 ************************************************************************************
. 
.                         *1. Collapse cost variables into new dataset
.                         *Need to collapse one var at a time and append to a new dataset
.                                 collapse broad_asreported, by (unit_cost)
{txt}
{com}.                                 save temp_dta/costs_temp.dta,replace
{txt}file temp_dta/costs_temp.dta saved

{com}.                                         clear
{txt}
{com}.                                         use temp_dta/costs.dta
{txt}
{com}.                                 *set trace on
.                                 foreach i of varlist ar_capital-a_prisd_unspecified {c -(}
{txt}  2{com}.                                                 bysort unit_cost (`i') : gen miss = mi(`i'[1])
{txt}  3{com}.                                                 collapse (sum) `i' (min) miss, by (unit_cost)
{txt}  4{com}.                                                 replace `i'=. if miss==1
{txt}  5{com}.                                                         drop miss
{txt}  6{com}.                                                 merge 1:1 unit_cost using temp_dta/costs_temp.dta
{txt}  7{com}.                                                         drop _merge
{txt}  8{com}.                                                         save temp_dta/costs_temp.dta,replace
{txt}  9{com}.                                                                 clear
{txt} 10{com}.                                                 use temp_dta/costs.dta
{txt} 11{com}.                                                 {c )-}
{txt}(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved

{com}.                                                 *
.                         *2. Now collapse all of the categorical variables just by total
.                                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.                                 keep if ar_narrow1=="full costing total" | ar_narrow1=="partial costing"
{txt}(8 observations deleted)

{com}.                                         save temp_dta/c_categoricals.dta,replace
{txt}(note: file temp_dta/c_categoricals.dta not found)
file temp_dta/c_categoricals.dta saved

{com}.                                         merge m:1 unit_cost using temp_dta/costs_temp.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                                                         drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                                                         * In this case, drops 6 that we dont want anyway
.                                                         drop _merge
{txt}
{com}.                                                         
.                                 * reorder for ease of finding 
.                                 * (This could be done in a better way, problem is the above procedure reverses the order)       
.                                 order id unit_cost broad_asreported ar_broad ar_capital ar_facility ar_overhead ar_personnel ar_recurring_goods ar_recurring_services ar_subtotal ar_total ar_unspecified ar_narrow narrow_asreported ar_cap_medical_equipment ar_cap_non_consumable_supplies ar_cap_non_medical_equipment ar_cap_unspecified ar_fac_building ar_fac_maint_and_util ar_fac_rental ar_fac_waste_management ar_ove_unspecified ar_per_admin_support ar_per_nurses ar_per_physicians ar_per_service_delivery ar_per_unspecified ar_recgoods_clinical_consumables ar_recgoods_consumables ar_recgoods_nclinical_consum ar_recservices_hct ar_recservices_adverse_events ar_recservices_consultancy ar_recservices_demand_generation ar_recservices_inpatient ar_recservices_lab_test ar_recservices_mgmt ar_recservices_sterilization ar_recservices_supply_chain ar_recservices_training ar_recservices_transport ar_sub_subtotal ar_tot_full_costing_total ar_tot_partial_costing ar_uns_unspecified broad_stdinput si_broad si_capital si_mixed si_personnel si_recurrent narrow_stdinput si_narrow si_cap_medical_equip si_cap_nonmed_equip si_cap_other si_mix_mixed si_per_mixed_unspec si_per_service_delivery si_per_support si_rec_building_space si_rec_med_int_supplies si_rec_nonmed_int_supplies broad_activity a_broad a_ancillary a_mixed a_operational a_primary_sd a_secondary_sd narrow_activity a_narrow a_anc_demand_generation a_anc_lab_services a_anc_unspecified a_mix_mixed a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_unspecified a_prisd_circumcision_proced a_prisd_unspecified a_secsd_hct output_pmonth output_pyear output_pyear2 output_pmonth2 output1k_mo output1k_yr output1k_yr2 output1k_mo2      
{err}variable {bf}ar_facility{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}.                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.         merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 order extractor_initials-consistency_rmk
{txt}
{com}.                 order id
{txt}
{com}.                                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                 drop _merge
{txt}
{com}.         
.                                 save final_dtas/long_file.dta, replace
{txt}file final_dtas/long_file.dta saved

{com}.                                 *This dataset may require some additional cleaning and culling for appropriate use
.                                 
.         * II.2 - Create Wide Dataset (collapse by unit_cost and add study_attributes data)
.         **********************************************************************************
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}. 
.         
.         * First set up the desired order of the collapsed cost variable with markers
.                         *Broad as reported costs
.                                 gen broad_asreported=.
{txt}(10 missing values generated)

{com}.                                 move broad_asreported ar_capital
{txt}
{com}.                         *Narrow as reported costs
.                                 gen narrow_asreported=.
{txt}(10 missing values generated)

{com}.                                 move narrow_asreported ar_cap_admin_equip
{txt}
{com}.                         
.                         *Broad Standardized Input costs
.                                 gen broad_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move broad_stdinput si_combined
{txt}
{com}.                                 
.                         * Narrow Standardized Input costs
.                                 gen narrow_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move narrow_stdinput si_com_unit_cost
{txt}
{com}.                         
.                                 
.                         *Broad Activity Costs
.                                 gen broad_activity=.
{txt}(10 missing values generated)

{com}.                                 move broad_activity a_combo
{txt}
{com}.                 
.                         * Narrow Activity costs
.                                 gen narrow_activity=.
{txt}(10 missing values generated)

{com}.                                 move narrow_activity a_com_combo
{txt}
{com}.                         
.         
.                         save temp_dta/costs.dta, replace
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. 
.                 * Collapse for reshape wide 
.                 * (here, in two parts,  1) collapse cost variables, and 
.                 *                                               2) remove non-total rows for all categorical variables).
.                 ************************************************************************************
. 
.                         *1. Collapse cost variables into new dataset
.                         *Need to collapse one var at a time and append to a new dataset
.                                 collapse broad_asreported, by (unit_cost)
{txt}
{com}.                                 save temp_dta/costs_temp.dta,replace
{txt}file temp_dta/costs_temp.dta saved

{com}.                                         clear
{txt}
{com}.                                         use temp_dta/costs.dta
{txt}
{com}.                                 *set trace on
.                                 foreach i of varlist ar_capital-a_prisd_unspecified {c -(}
{txt}  2{com}.                                                 bysort unit_cost (`i') : gen miss = mi(`i'[1])
{txt}  3{com}.                                                 collapse (sum) `i' (min) miss, by (unit_cost)
{txt}  4{com}.                                                 replace `i'=. if miss==1
{txt}  5{com}.                                                         drop miss
{txt}  6{com}.                                                 merge 1:1 unit_cost using temp_dta/costs_temp.dta
{txt}  7{com}.                                                         drop _merge
{txt}  8{com}.                                                         save temp_dta/costs_temp.dta,replace
{txt}  9{com}.                                                                 clear
{txt} 10{com}.                                                 use temp_dta/costs.dta
{txt} 11{com}.                                                 {c )-}
{txt}(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved

{com}.                                                 *
.                         *2. Now collapse all of the categorical variables just by total
.                                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.                                 keep if ar_narrow1=="full costing total" | ar_narrow1=="partial costing"
{txt}(8 observations deleted)

{com}.                                         save temp_dta/c_categoricals.dta,replace
{txt}file temp_dta/c_categoricals.dta saved

{com}.                                         merge m:1 unit_cost using temp_dta/costs_temp.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                                                         drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                                                         * In this case, drops 6 that we dont want anyway
.                                                         drop _merge
{txt}
{com}.                                                         
.                                 * reorder for ease of finding 
.                                 * (This could be done in a better way, problem is the above procedure reverses the order)       
.                                 /*
>                                 order id unit_cost broad_asreported ar_broad ar_capital ar_facility ar_overhead ar_personnel ar_recurring_goods ar_recurring_services ar_subtotal ar_total ar_unspecified ar_narrow narrow_asreported ar_cap_medical_equipment ar_cap_non_consumable_supplies ar_cap_non_medical_equipment ar_cap_unspecified ar_fac_building ar_fac_maint_and_util ar_fac_rental ar_fac_waste_management ar_ove_unspecified ar_per_admin_support ar_per_nurses ar_per_physicians ar_per_service_delivery ar_per_unspecified ar_recgoods_clinical_consumables ar_recgoods_consumables ar_recgoods_nclinical_consum ar_recservices_hct ar_recservices_adverse_events ar_recservices_consultancy ar_recservices_demand_generation ar_recservices_inpatient ar_recservices_lab_test ar_recservices_mgmt ar_recservices_sterilization ar_recservices_supply_chain ar_recservices_training ar_recservices_transport ar_sub_subtotal ar_tot_full_costing_total ar_tot_partial_costing ar_uns_unspecified broad_stdinput si_broad si_capital si_mixed si_personnel si_recurrent narrow_stdinput si_narrow si_cap_medical_equip si_cap_nonmed_equip si_cap_other si_mix_mixed si_per_mixed_unspec si_per_service_delivery si_per_support si_rec_building_space si_rec_med_int_supplies si_rec_nonmed_int_supplies broad_activity a_broad a_ancillary a_mixed a_operational a_primary_sd a_secondary_sd narrow_activity a_narrow a_anc_demand_generation a_anc_lab_services a_anc_unspecified a_mix_mixed a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_unspecified a_prisd_circumcision_proced a_prisd_unspecified a_secsd_hct output_pmonth output_pyear output_pyear2 output_pmonth2 output1k_mo output1k_yr output1k_yr2 output1k_mo2      
>                                                 */
.                                                 
.                                 * First label organizational variables after resort
.                                 label variable broad_asreported "----------------------------------"
{txt}
{com}.                                 label variable narrow_asreported "----------------------------------"
{txt}
{com}.                                 label variable broad_stdinput "----------------------------------"      
{txt}
{com}.                                 label variable narrow_stdinput "----------------------------------"
{txt}
{com}.                                 label variable broad_activity "----------------------------------"
{txt}
{com}.                                 label variable narrow_activity "----------------------------------"
{txt}
{com}.                         
.                                 * Generate a Unit Cost Total "uc_total"
.                                 move mean_cost ar_broad
{txt}
{com}.                                 
.                                 * Finally merge in study_attribute dataset
.                                 merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                                         drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                                 * In this case it drops the 6 sub-studies that we dont want
.                                                 drop _merge
{txt}
{com}.                         
.                         
.                         *Final cleaning and creation of organizational variables
.                         *********************************************************
.                         drop cost_record subset_of ar_narrow1 ar_broad1 si_narrow1 si_broad1 a_narrow1 a_broad1
{txt}
{com}.                         
.                         * Save version before importing GDPPC data:
.                         save final_dtas/wide_file.dta, replace
{txt}(note: file final_dtas/wide_file.dta not found)
file final_dtas/wide_file.dta saved

{com}.                         
.                         * Finally, import GDPPC data for each study.
.                         ********************************************
.                                 * Underlying dataset can be found at https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
.                                 * Simply download EXCEL file option for ALL countries (should be default). 
.                                 * Download for this presentation was done on 25 October 2017
.                                 * File name is: API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls
.                                 * place file in path along with data extraction template
.                                 * Presumably formatting for this file shouldnt change year-to-year, but possible 
.                                 * ...so check that import and file manipulation commands below work. 
.                 
.                         save "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/pat_tracking_wide_file_Apr2018.dta", replace
{txt}(note: file /Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/pat_tracking_wide_file_Apr2018.dta not found)
file /Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/pat_tracking_wide_file_Apr2018.dta saved

{com}.                         
.                         /*
>                         clear
> 
>         *Change directory to pull in outside data
>         cd "/Users/dcameron03/Documents/Berkeley/`GSI with Jim/Stata/GHCC/"
>                         
>                         import excel "API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls", firstrow sheet("Data") cellrange(A4) case(l)
>                                                 // Years wont translate to varnames, but will be retained as labels for cols e-bi
>                                                 // Need to manually rename the Years row (4) from #### to y####
>                                                 drop countrycode-y1999
>                                 STOP            
>                         *global years y2000-y2016
>                         reshape long y, i(countryname) j(year_d)
>                         rename y gdppc
>                         rename year_d currency_yr
>                         rename countryname country_alt
>                         save VMMC/temp_dta/gdppc.dta, replace
>                         
>                         clear
>                         
>                         *Now merge in the GDPPC data you've created: 
>                         use VMMC/final_dta/wide_file.dta
>                         
>                         merge m:1 country_alt currency_yr using "VMMC/temp_dta/gdppc.dta"
>                                 drop if _merge==2
>                                 drop _merge
>                                 
>                                 
>                         move gdppc country
>                         
>                         
>                         save VMMC/final_dta/wide_file.dta, replace
> 
>                         
> * And Binaries and amounts of global fund (GFAMTB) and PEPFAR funding
>         ** For dataset for this process visit: <http://ghdx.healthdata.org/record/development-assistance-health-database-1990-2015>.
>         ** To do this you will need to maintain a string variable with the country names in the same format as the WB country names.
> 
>                         clear
>                         use external_data/IHME_DAH_DATABASE_1990_2015_Y2016M04D25.DTA
> 
>                         * Get rid of unnecessary data
>                                 drop if year<2000
>                                 drop if channel!="BIL_USA" & channel!="GFATM"
>                                 gen hiv_funding=hiv_dah_15+hiv_treat_dah_15+hiv_prev_dah_15+hiv_pmtct_dah_15+hiv_ovc_dah_15+hiv_care_dah_15+hiv_ct_dah_15+hiv_unid_dah_15+hiv_tb_dah_15+hiv_hss_dah_15
>                                 
>                                 gen pepfar=0
>                                         replace pepfar=1 if channel=="BIL_USA" & year>2002 & hiv_funding!=0
>                                         label var pepfar "Country recieved PEPFAR funding y/n"
>                                 
>                                 gen pepfar_amt=0
>                                         replace pepfar_amt=hiv_dah_15 if channel=="BIL_USA" & year>2002 
>                                         label var pepfar_amt "Amnt of PEPFAR funding 2016 USD"
>                                 
>                                 gen global_fund=0
>                                         replace global_fund=1 if dah_15!=0 & channel=="GFATM"
>                                         label var global_fund "Country recieved Global Fund funding y/n"
>                                 
>                                 gen global_fund_amt=0
>                                         replace global_fund_amt=dah_15 if channel=="GFATM"
>                                         label var global_fund_amt "Amnt of GF funding 2016 USD"
>                                 
>                                 keep year recipient_country pepfar pepfar_amt global_fund global_fund_amt
>                                 rename year currency_yr
>                                 rename recipient_country country_alt
>                                 
>                 * Inflate to 2016 dollars using the GDP Price Deflator          
>                 gen gdp_current = 111.416                               
>                                 gen gdp_old=.                           
>                                         replace gdp_old=        66.773  if currency_yr==        1990
>                                         replace gdp_old=        68.996  if currency_yr==        1991
>                                         replace gdp_old=        70.569  if currency_yr==        1992
>                                         replace gdp_old=        72.248  if currency_yr==        1993
>                                         replace gdp_old=        73.785  if currency_yr==        1994
>                                         replace gdp_old=        75.324  if currency_yr==        1995
>                                         replace gdp_old=        76.699  if currency_yr==        1996
>                                         replace gdp_old=        78.012  if currency_yr==        1997
>                                         replace gdp_old=        78.859  if currency_yr==        1998
>                                         replace gdp_old=        80.065  if currency_yr==        1999
>                                         replace gdp_old=        81.887  if currency_yr==        2000
>                                         replace gdp_old=        83.754  if currency_yr==        2001
>                                         replace gdp_old=        85.039  if currency_yr==        2002
>                                         replace gdp_old=        86.735  if currency_yr==        2003
>                                         replace gdp_old=        89.12   if currency_yr==        2004
>                                         replace gdp_old=        91.988  if currency_yr==        2005
>                                         replace gdp_old=        94.814  if currency_yr==        2006
>                                         replace gdp_old=        97.337  if currency_yr==        2007
>                                         replace gdp_old=        99.246  if currency_yr==        2008
>                                         replace gdp_old=        100             if currency_yr==        2009
>                                         replace gdp_old=        101.221 if currency_yr==        2010
>                                         replace gdp_old=        103.311 if currency_yr==        2011
>                                         replace gdp_old=        105.214 if currency_yr==        2012
>                                         replace gdp_old=        106.913 if currency_yr==        2013
>                                         replace gdp_old=        108.832 if currency_yr==        2014
>                                         replace gdp_old=        110.012 if currency_yr==        2015
>                                                                 
>                                         replace global_fund_amt=global_fund_amt*(gdp_current/gdp_old)           
>                                         replace pepfar_amt=pepfar_amt*(gdp_current/gdp_old)     
>                                                 drop gdp_current gdp_old
>                                 collapse (sum) pepfar_amt global_fund_amt (max) pepfar global_fund, by(country_alt currency_yr)
>                                 
>                                 save VMMC/temp_dta/pepfar_gf_data.dta, replace
>                                 clear
>                                 use VMMC/final_dta/wide_file.dta
>                                 
>                                 merge m:1 country_alt currency_yr using "VMMC/temp_dta/pepfar_gf_data.dta"
>                                         drop if _merge==2
>                                         * There are problems here because missing data for South Africa (2014) and Zimbabwe (2014, 2015)
>                                         * Will need to check for other missing values by looking at data that didnt merge from master. 
>                                                 *Based on patterns, I assume:
>                                                 replace pepfar=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace pepfar=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 drop _merge
>                                                 drop country_alt
>                                                 
>                         save VMMC/final_dta/wide_file.dta, replace                                              
> 
>         STOP
>                         
>         *** Finally, also add in the line that saves a copy of ART to the GitHub folder for Lily to see it                      
>         cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
>         save VMMC_wide_file.dta, replace                
>                                 
>                                 
>                                 
> ** STOP HERE                    
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         

{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. ******************************************************
. * Data Cleaning and Transformation Do File
. * Global Health Costing Consortium (GHCC)
. * Modifications from January - July 2017
. * 
. * Latest update date: 07 April 2018
. *
. * Drew Cameron, Health Policy PhD Student, UC Berkeley
. * drew.cameron@berkeley.edu
. ******************************************************
. 
. ********************************************************************************
. *Instructions for Future Users
. ********************************************************************************
. * All relevant files should be contained within the same folder named "GCHH"
. * And include the following subfolders: 
.                 * 1. The underlying data extraciton form in .xlsx format for each intervention area:
.                                 * a. VMMC studies
.                                 * b. ART studies
.                                 * c. other study types... 
.                         * Leave excel files in GHCC/ 
.                         * Naming convention is: "GHCC_Data_Extraction_[intervention]_v#_day-month-year.xlsx"
.                 * 2. Other relevant files?
.                 * 3. Path should contain the following subfolders and structures
.                                 * GHCC/temp_dta
.                                 * GHCC/logs
.                                 * GHCC/outputs
.                                 * GHCC/do_files
.                                 * GHCC/final_dta
.                                 * GHCC/external_data
.                                 * GHCC/UCSR_exports
.                 * 4. Future user should change path as well as change the name of the excel file
.                 *        (ie. excel file name "GHCC_Data_Extraction_VMMC_v54_16-June-2017") 
.                 *    in step 1 for both the "Cost data" tab/sheet, and the "Study attributes" tab/sheet                 
.                 
. * Goals are:
.                 * a. Combine 'study attributes' and 'cost data' tabs to create one "long" dataset 
.                 *                       at "mean_cost" and "input_cost" levels "/long_file.dta"
.                 * b. Create one dataset relevant for econometric analysis
.                 *                       reshaped "wide" at the "unit_cost" level (relevant for dynamic 
.                 *                       unit costing tool) "/wide_file.dta"
.                 * c. Create one dataset for Unit Cost Study Repository structured same as (b) above, 
.                 *                       but including any eliminated subcategories of data (ie. "per visit costs"
.                 *                       for ART, as opposed to the more commonly reported "costs per annum")
. ********************************************************************************
. 
. 
. 
. 
.         *** Still Need to incorporate
.         ******************************
.         * strim (to trim off extra spaces from excel for pre-encoded fields)
.         
.         
.         
. *************************************************
. * Part I: Load, select, and clean cost-level data 
. *************************************************
. 
. * 0: Change directory (adjust directory as appropriate)
. ***********************
.         clear all
{res}{txt}
{com}.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking"
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking
{txt}
{com}.         
. * 1: Load in both data files (change title of excel file as appropriate)
. ***********************
. 
. * Costs data sheet
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Cost data") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(1,312 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear
{txt}
{com}.                 
. * Study Attributes data sheet   
.         import excel extraction_templates/GHCC_Extraction_Patient_Tracking_v4_16-Mar-2018.xlsx, firstrow sh("Study attributes") cellrange(A4) case(l)
{res}{txt}
{com}.         drop if id == ""
{txt}(496 observations deleted)

{com}.                 *Save for working later
.                 save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.                 clear
{txt}
{com}.                 
.                 *Will need to import and append additional cost_level datafiles here as they are created
.         
.                 
. * 2: Load any relevant packages
. *******************************
.         *ssc install labutil2
. 
. 
. * 3: Create unique unit_cost variable
. *************************************
.         *Drop this later
.                 use temp_dta/costs.dta
{txt}
{com}. 
.         *First concatinate cost level data into unit_cost level observations
.                 gen _="_"
{txt}
{com}.                 gen unit_cost1=id+_+unit_cost
{txt}
{com}.                 move unit_cost1 unit_cost
{txt}
{com}.                 drop unit_cost
{txt}
{com}.                 drop _
{txt}
{com}.                 rename unit_cost1 unit_cost
{res}{txt}
{com}.                 
.         *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. *****************************************************************************
. * Part II: Standardizing and inflating costs for analysis of apples to apples
. *****************************************************************************
. 
. * Start by inflating the prices to 2016 dollars using US CPI
. ************************************************************
.         * First merge in study-attributes data for the currency_year variable
.         merge m:1 id using temp_dta/study_attributes.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                 drop extractor_initials-discount_rate_rs 
{txt}
{com}.                 drop currency_yr_rs-_merge
{txt}
{com}.                         * No need to destring numerics
. 
.                         *Include adjustments for Lori's data here: 
.                         ******************************************
.                         
.                                 
.                                 
.                                 
.                         
.                         * GDP Price Deflator
.                         ********************
.                                 gen gdp_current = 111.416                               
{txt}
{com}.                                 gen gdp_old=.                           
{txt}(10 missing values generated)

{com}.                                         replace gdp_old=        66.773  if currency_yr==        1990
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        68.996  if currency_yr==        1991
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        70.569  if currency_yr==        1992
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        72.248  if currency_yr==        1993
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        73.785  if currency_yr==        1994
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        75.324  if currency_yr==        1995
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        76.699  if currency_yr==        1996
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.012  if currency_yr==        1997
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        78.859  if currency_yr==        1998
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        80.065  if currency_yr==        1999
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        81.887  if currency_yr==        2000
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        83.754  if currency_yr==        2001
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        85.039  if currency_yr==        2002
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        86.735  if currency_yr==        2003
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        89.12   if currency_yr==        2004
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        91.988  if currency_yr==        2005
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        94.814  if currency_yr==        2006
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        97.337  if currency_yr==        2007
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        99.246  if currency_yr==        2008
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        100             if currency_yr==        2009
{txt}(10 real changes made)

{com}.                                         replace gdp_old=        101.221 if currency_yr==        2010
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        103.311 if currency_yr==        2011
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        105.214 if currency_yr==        2012
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        106.913 if currency_yr==        2013
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        108.832 if currency_yr==        2014
{txt}(0 real changes made)

{com}.                                         replace gdp_old=        110.012 if currency_yr==        2015
{txt}(0 real changes made)

{com}.                                                                 
.                                                 replace mean_cost=mean_cost*(gdp_current/gdp_old)               
{txt}(10 real changes made)

{com}.                                                         drop gdp_current gdp_old        
{txt}
{com}.                                                 * All can easily be updated for 2017 dollars later.
.                         
.                         
.                 *Save for working later
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. 
.                 
. *
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
.         * Replace miscategorized "mixed" values for totals in si_ and a_ categories
.         foreach i of varlist si_narrow si_broad {c -(}
{txt}  2{com}.                 replace `i'="Combined" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(0 real changes made)
(2 real changes made)

{com}.         foreach i of varlist a_narrow a_broad {c -(}
{txt}  2{com}.                 replace `i'="combo" if `i'=="Mixed" & ar_broad=="Total"
{txt}  3{com}.         {c )-}
{txt}(2 real changes made)
(2 real changes made)

{com}.         * Get rid of any sub-category costs in the costing sheet (theyre screwing things up)
.                 replace mean_cost=. if ar_narrow=="Subtotal" | ar_broad=="Subtotal"
{txt}(0 real changes made)

{com}.         
. *!******* THIS TO BE REMOVED AFTER BEN FIXES EVERYTHING
. *
. 
. * Eventually include GDPPC designtations here for study attributes tab 
. * (need to also find a clever way to  not sum gdppc during reshape)
. 
. 
. 
. *****************************************************   
. * Part III: Cleaning (destring, recode, gen new vars)
. *****************************************************
. 
. 
. 
. * First, encode the for "As Reported" Costs
. ******************************************
. 
.                         *Input Broad Categories
.                         ***********************
.                                 *Encode and create categorical
.                                 replace ar_broad = lower(ar_broad)
{txt}(10 real changes made)

{com}.                                 encode ar_broad, generate(ar_broad1) label(ar_broad)
{txt}
{com}.                                 move ar_broad1 ar_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename ar_broad1 ar_broad2
{res}{txt}
{com}.                                 rename ar_broad ar_broad1
{res}{txt}
{com}.                                 rename ar_broad2 ar_broad
{res}{txt}
{com}.                                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab ar_broad, gen(v_)   

       {txt}ar_broad {c |}      Freq.     Percent        Cum.
{hline 16}{c +}{hline 35}
        capital {c |}{res}          2       20.00       20.00
{txt}  patient costs {c |}{res}          2       20.00       40.00
{txt}      personnel {c |}{res}          2       20.00       60.00
{txt}recurring goods {c |}{res}          2       20.00       80.00
{txt}          total {c |}{res}          2       20.00      100.00
{txt}{hline 16}{c +}{hline 35}
          Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist ar_broad, rc0
{res}ar_broad:
           1 capital 
           2 patient costs 
           3 personnel 
           4 recurring goods 
           5 total 
{txt}
{com}.                                 return list

{txt}scalars:
       r(ar_broad_min) =  {res}1
       {txt}r(ar_broad_max) =  {res}5
    {txt}r(ar_broad_nemiss) =  {res}0
         {txt}r(ar_broad_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"capital" "patient costs" "personnel" "r{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}ar_broad{txt}"
           r(varlabel) : "{res}ar_broad{txt}"
            r(varlist) : "{res}ar_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist ar_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow 'as reported' input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace ar_narrow = lower(ar_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * First must simplify some of the var names for easier coding
.                         replace ar_narrow="admin_support" if ar_narrow=="administration/support"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="admin_equip" if ar_narrow=="administrative equipment"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="capital, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="key_drugs" if ar_narrow=="drugs - key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nonkey_drugs" if ar_narrow=="drugs - non-key"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maintenance" if ar_narrow=="facility maintenance"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="rental" if ar_narrow=="facility rental"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="hct" if ar_narrow=="hiv counseling and testing"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="indirect" if ar_narrow=="indirect costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="inpatient" if ar_narrow=="inpatient service"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="intangible" if ar_narrow=="intangible costs"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab consumables" if ar_narrow=="laboratory consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab equip" if ar_narrow=="laboratory equipment"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab personnel" if ar_narrow=="laboratory personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="lab test" if ar_narrow=="laboratory test"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="maint_and_util" if ar_narrow=="maintenance and utilities"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mgmt" if ar_narrow=="management"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="mconsult" if ar_narrow=="medical consultation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="overhead, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="partial costing" if ar_narrow=="partial costing total"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="personnel, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="pharmacy" if ar_narrow=="pharmacy personnel"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring goods, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="unspecified" if ar_narrow=="recurring services, unspecified"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="service delivery" if ar_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace ar_narrow="sterilization" if ar_narrow=="sterilization/cleaning"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="adverse_events" if ar_narrow=="treating adverse event"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="transport" if ar_narrow=="transportation"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="nclinical_consum" if ar_narrow=="non-clinical consumables"
{txt}(0 real changes made)

{com}.                         replace ar_narrow="patient_transport" if ar_narrow=="patient transportation"
{txt}(2 real changes made)

{com}. 
.                         ******************************
.                                 tostring capital-total, replace
{txt}capital was {res:byte} now {res:str1}
patient_costs was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurring_goods was {res:byte} now {res:str1}
total was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0"
{txt}  3{com}.                                         replace `i'=ar_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}capital{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}patient_costs{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str17{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}recurring_goods{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}total{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str18{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode ar_narrow, gen(ar_narrow1) label(ar_narrow)
{txt}
{com}.                                         move ar_narrow1 ar_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename ar_narrow1 ar_narrow2
{res}{txt}
{com}.                                         rename ar_narrow ar_narrow1
{res}{txt}
{com}.                                         rename ar_narrow2 ar_narrow
{res}{txt}
{com}. 
.                                         
.                                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 split ar_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}ar_broad11{col 13}ar_broad12

{com}.                                 replace ar_broad11=substr(ar_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=ar_broad11+ar_broad12+_
{txt}
{com}.                                                 drop ar_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+ar_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                    {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 27}{c +}{hline 35}
           cap_admin_equip {c |}{res}          2       20.00       20.00
{txt}patcosts_patient_transport {c |}{res}          2       20.00       40.00
{txt}      per_service delivery {c |}{res}          2       20.00       60.00
{txt}      recgoods_consumables {c |}{res}          2       20.00       80.00
{txt}    tot_full costing total {c |}{res}          2       20.00      100.00
{txt}{hline 27}{c +}{hline 35}
                     Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 cap_admin_equip 
           2 patcosts_patient_transport 
           3 per_service delivery 
           4 recgoods_consumables 
           5 tot_full costing total 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}5
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}5

{txt}macros:
             r(labels) : "{res}"cap_admin_equip" "patcosts_patient_tran{txt}.."
             r(values) : "{res}1 2 3 4 5{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}5
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}. *!*                                     *drop _
.                                 *clean up
.                                 foreach i of varlist cap_admin_equip-tot_full_costing_total {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist capital-total{c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)
(8 missing values generated)

{com}.                                         drop capital-total
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist capital-total {c -(}
{txt}  2{com}.                                         move `i' cap_admin_equip
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist capital-tot_full_costing_total{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
variable {bf}cap_admin_equip{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}patcosts_patient_transport{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}recgoods_consumables{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}tot_full_costing_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                         
.                                         * Fix variable names that are too long: 
.                                         //rename recservices_equipment_maintenanc recserv_equip_maint
.                                 
.                         
.                         *Finally add a prefix to these new variables ar_
.                         foreach i of varlist capital-tot_full_costing_total {c -(}
{txt}  2{com}.                                 rename `i'      ar_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *
.         
.         
. * Next, Encode Procedure for Standardized Inputs
. ************************************************
. 
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}. 
. 
.                         *Input Broad Categories
.                         ***********************
.                         replace si_broad = lower(si_broad)                      
{txt}(10 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace si_broad="recurrent" if si_broad=="recurrent - other"
{txt}(6 real changes made)

{com}.                                 ***** Should do the same here for TB coding including:
.                                                 * Patient direct, medical
.                                                 * Patient direct, non medical
.                                                 * Patient indirect
.                                                 * Patient direct
.                                                 * Patient mixed
.                                                 * Patient coping strategies
.                         
.                                 *Encode and create categorical
.                                 encode si_broad, generate(si_broad1) label(si_broad)
{txt}
{com}.                                 move si_broad1 si_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename si_broad1 si_broad2
{res}{txt}
{com}.                                 rename si_broad si_broad1
{res}{txt}
{com}.                                 rename si_broad2 si_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category using value labels
.                                         *set trace on
.                                 tab si_broad, gen(v_)   

   {txt}si_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
   combined {c |}{res}          2       20.00       20.00
{txt}  personnel {c |}{res}          2       20.00       40.00
{txt}  recurrent {c |}{res}          6       60.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist si_broad, rc0
{res}si_broad:
           1 combined 
           2 personnel 
           3 recurrent 
{txt}
{com}.                                 return list

{txt}scalars:
       r(si_broad_min) =  {res}1
       {txt}r(si_broad_max) =  {res}3
    {txt}r(si_broad_nemiss) =  {res}0
         {txt}r(si_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combined" "personnel" "recurrent"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}si_broad{txt}"
           r(varlabel) : "{res}si_broad{txt}"
            r(varlist) : "{res}si_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist si_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.                         * Narrow input cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace si_narrow = lower(si_narrow)
{txt}(10 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace si_narrow="service_delivery" if si_narrow=="service delivery personnel"
{txt}(2 real changes made)

{com}.                         replace si_narrow="support" if si_narrow=="support personnel"
{txt}(0 real changes made)

{com}.                         replace si_narrow="mixed_unspec" if si_narrow=="personnel - mixed or unspecified"
{txt}(0 real changes made)

{com}.                         replace si_narrow="medical_equip" if si_narrow=="equipment (medical/intervention)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_equip" if si_narrow=="equipment (non-medical/non-intervention or unspecified)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="vehicles" if si_narrow=="vehicles, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other capital"
{txt}(0 real changes made)

{com}.                         replace si_narrow="building_space" if si_narrow=="building/space, recurrent"
{txt}(0 real changes made)

{com}.                         replace si_narrow="med_int_supplies" if si_narrow=="supplies (medical/intervention, excl. key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="key_drugs" if si_narrow=="supplies (key drugs)"
{txt}(0 real changes made)

{com}.                         replace si_narrow="nonmed_int_supplies" if si_narrow=="supplies (non-medical/non-intervention or unspecified)"
{txt}(4 real changes made)

{com}.                         replace si_narrow="other" if si_narrow=="other recurrent"
{txt}(2 real changes made)

{com}.                                         * Not making changes to the TB categories now b/c not applicable yet and we may adapt these categories first
. 
.                         tostring combined-recurrent, replace
{txt}combined was {res:byte} now {res:str1}
personnel was {res:byte} now {res:str1}
recurrent was {res:byte} now {res:str1}

{com}. 
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=si_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combined{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str15{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}personnel{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str16{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}recurrent{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str19{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode si_narrow, gen(si_narrow1) label(si_narrow)
{txt}
{com}.                                         move si_narrow1 si_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename si_narrow1 si_narrow2
{res}{txt}
{com}.                                         rename si_narrow si_narrow1
{res}{txt}
{com}.                                         rename si_narrow2 si_narrow
{res}{txt}
{com}. 
.                         
.                         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 gen si_broad11=si_broad1
{txt}
{com}.                                 replace si_broad11=substr(si_broad1,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=si_broad11+_
{txt}
{com}.                                                 drop si_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+si_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                         
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

                 {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 24}{c +}{hline 35}
    com_unit cost total {c |}{res}          2       20.00       20.00
{txt}   per_service_delivery {c |}{res}          2       20.00       40.00
{txt}rec_nonmed_int_supplies {c |}{res}          4       40.00       80.00
{txt}              rec_other {c |}{res}          2       20.00      100.00
{txt}{hline 24}{c +}{hline 35}
                  Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_unit cost total 
           2 per_service_delivery 
           3 rec_nonmed_int_supplies 
           4 rec_other 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_unit cost total" "per_service_deliv{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.                                 
.                                 *clean up
.                                 foreach i of varlist com_unit_cost_total-rec_other {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(8 missing values generated)
(4 missing values generated)

{com}.                                         drop combined-recurrent
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combined-recurrent {c -(}
{txt}  2{com}.                                         move `i' com_unit_cost_total
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combined-rec_other{c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(2 real changes made)
(6 real changes made)
variable {bf}com_unit_cost_total{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}per_service_delivery{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}rec_nonmed_int_supplies{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}rec_other{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                         
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist combined-rec_other {c -(}
{txt}  2{com}.                                 rename `i'      si_`i'          
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
. 
. 
. 
. * Finally, Encode Procedure for Activity Costs
. **********************************************
.         
. save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}. clear all
{res}{txt}
{com}. use temp_dta/costs.dta
{txt}
{com}.         
.         
.         
.                 *Activity Broad Categories
.                         ***********************
.                         replace a_broad = lower(a_broad)                        
{txt}(8 real changes made)

{com}.                         *First, make the broad names (that will be in use from HIV) usable
.                         replace a_broad="primary_sd" if a_broad=="primary service delivery"
{txt}(2 real changes made)

{com}.                         replace a_broad="secondary_sd" if a_broad=="secondary service delivery"
{txt}(0 real changes made)

{com}.                                 ***** Would be nice if these were better conceived, but whatever.
.                         
.                                 *Encode and create categorical
.                                 encode a_broad, generate(a_broad1) label(a_broad)
{txt}
{com}.                                 move a_broad1 a_broad
{txt}
{com}.                                 *drop input_broad_cat
.                                 rename a_broad1 a_broad2
{res}{txt}
{com}.                                 rename a_broad a_broad1
{res}{txt}
{com}.                                 rename a_broad2 a_broad
{res}{txt}
{com}.                 
.                                 *Create binaries for each category
.                                 *set trace on
.                                 tab a_broad, gen(v_)    

    {txt}a_broad {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
      combo {c |}{res}          2       20.00       20.00
{txt}operational {c |}{res}          6       60.00       80.00
{txt} primary_sd {c |}{res}          2       20.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist a_broad, rc0
{res}a_broad:
           1 combo 
           2 operational 
           3 primary_sd 
{txt}
{com}.                                 return list

{txt}scalars:
        r(a_broad_min) =  {res}1
        {txt}r(a_broad_max) =  {res}3
     {txt}r(a_broad_nemiss) =  {res}0
          {txt}r(a_broad_k) =  {res}3

{txt}macros:
             r(labels) : "{res}"combo" "operational" "primary_sd"{txt}"
             r(values) : "{res}1 2 3{txt}"
            r(lblname) : "{res}a_broad{txt}"
           r(varlabel) : "{res}a_broad{txt}"
            r(varlist) : "{res}a_broad{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}3
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist a_broad, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'             
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                         *
. 
. 
.         
.                 * Narrow activity cost categories
.                         * Applying these directly to the broad categories to break out later
.                         ******************************
.                         replace a_narrow = lower(a_narrow)
{txt}(8 real changes made)

{com}.                         
.                         * Now fix variable names to get rid of symbols
.                         replace a_narrow="circumcision_proced" if a_narrow=="for vmmc: circumcision procedure"
{txt}(0 real changes made)

{com}.                         replace a_narrow="pre_post_exam" if a_narrow=="for vmmc: pre- and post-examination"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="primary service delivery, unspecified"                     
{txt}(2 real changes made)

{com}.                         replace a_narrow="arv_delivery" if a_narrow=="for art: arv delivery"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_monitoring" if a_narrow=="for art: routine lab monitoring"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hct" if a_narrow=="for vmmc: hct"                     
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="secondary service delivery, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="lab_services" if a_narrow=="laboratory services"
{txt}(0 real changes made)

{com}.                         replace a_narrow="adherence_retention" if a_narrow=="adherence/retention"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="ancillary, unspecified"
{txt}(0 real changes made)

{com}.                         replace a_narrow="program_mgmt" if a_narrow=="programme management"
{txt}(0 real changes made)

{com}.                         replace a_narrow="hmis_recordkeeping" if a_narrow=="hmis and record-keeping"
{txt}(0 real changes made)

{com}.                         replace a_narrow="bldg_equip" if a_narrow=="building and equipment (maintenance and utlilities)"
{txt}(0 real changes made)

{com}.                         replace a_narrow="unspecified" if a_narrow=="operational, unspecified"
{txt}(4 real changes made)

{com}.                         
.                         tostring combo-primary_sd, replace
{txt}combo was {res:byte} now {res:str1}
operational was {res:byte} now {res:str1}
primary_sd was {res:byte} now {res:str1}

{com}.         
.                         foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         replace `i'="" if `i'=="0" | `i'=="."
{txt}  3{com}.                                         replace `i'=a_narrow if `i'=="1"
{txt}  4{com}.                                         replace `i'= lower(`i')
{txt}  5{com}.                                         encode `i', gen(`i'_1) label(`i')
{txt}  6{com}.                                         drop `i'
{txt}  7{com}.                                         rename `i'_1 `i' 
{txt}  8{com}.                                 {c )-}
{txt}(8 real changes made)
variable {bf}combo{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str5{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(4 real changes made)
variable {bf}operational{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str14{sf}
{txt}(6 real changes made)
(0 real changes made)
{res}{txt}(8 real changes made)
variable {bf}primary_sd{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str11{sf}
{txt}(2 real changes made)
(0 real changes made)
{res}{txt}
{com}.                                 * Now destring and encode input_narrow_cost 
.                                         encode a_narrow, gen(a_narrow1) label(a_narrow)
{txt}
{com}.                                         move a_narrow1 a_narrow
{txt}
{com}.                                         *drop input_narrow_cat
.                                         rename a_narrow1 a_narrow2
{res}{txt}
{com}.                                         rename a_narrow a_narrow1
{res}{txt}
{com}.                                         rename a_narrow2 a_narrow
{res}{txt}
{com}. 
.                                         
.         * Now create binaries for the reshape command (need to finalize)
.                         *********************************************
.                                 *create prefix
.                                 
.                                 split a_broad1, p(" " "_" "-")
{res}variables created as string: 
{txt}{col 1}a_broad11{col 12}a_broad12

{com}.                                 replace a_broad11=substr(a_broad11,1,3)
{txt}(10 real changes made)

{com}.                                 gen _="_"
{txt}
{com}.                                 gen prefix=a_broad11+a_broad12+_
{txt}
{com}.                                                 drop a_broad11-_
{txt}
{com}.                                 *combine prefix with narrow cat var
.                                 gen narrow_cat=prefix+a_narrow1
{txt}
{com}.                                         drop prefix
{txt}
{com}.                                 *encode categorical
.                                 encode narrow_cat, gen(narrow_cat1) label(narrow_cat)
{txt}
{com}.                                         drop narrow_cat
{txt}
{com}.                                         rename narrow_cat1 narrow
{res}{txt}
{com}.                                 
.                                 
.                                 *Now generate binaries
.                                 tab narrow, gen(v_)     

            {txt}narrow {c |}      Freq.     Percent        Cum.
{hline 19}{c +}{hline 35}
         com_combo {c |}{res}          2       20.00       20.00
{txt}ope_transportation {c |}{res}          2       20.00       40.00
{txt}   ope_unspecified {c |}{res}          4       40.00       80.00
{txt} prisd_unspecified {c |}{res}          2       20.00      100.00
{txt}{hline 19}{c +}{hline 35}
             Total {c |}{res}         10      100.00
{txt}
{com}.                                 labellist narrow, rc0
{res}narrow_cat:
           1 com_combo 
           2 ope_transportation 
           3 ope_unspecified 
           4 prisd_unspecified 
{txt}
{com}.                                 return list

{txt}scalars:
     r(narrow_cat_min) =  {res}1
     {txt}r(narrow_cat_max) =  {res}4
  {txt}r(narrow_cat_nemiss) =  {res}0
       {txt}r(narrow_cat_k) =  {res}4

{txt}macros:
             r(labels) : "{res}"com_combo" "ope_transportation" "ope_un{txt}.."
             r(values) : "{res}1 2 3 4{txt}"
            r(lblname) : "{res}narrow_cat{txt}"
            r(varlist) : "{res}narrow{txt}"

{com}.                                 local K: word count `r(labels)'
{txt}
{com}.                                 display "`K'"
{res}4
{txt}
{com}.                                 forvalues k = 1/`K' {c -(}
{txt}  2{com}.                                         qui labellist narrow, rc0
{txt}  3{com}.                                         local name : word `k' of `r(labels)'
{txt}  4{com}.                                         local name = strtoname("`name'")
{txt}  5{com}.                                         rename v_`k' `name'
{txt}  6{com}.                                 {c )-} 
{res}{txt}
{com}.                                         drop narrow
{txt}
{com}.                                         *drop _
.         
.                                 *clean up
.                                 foreach i of varlist com_combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=. if `i'==0
{txt}  3{com}.                                 {c )-}
{txt}(8 real changes made, 8 to missing)
(8 real changes made, 8 to missing)
(6 real changes made, 6 to missing)
(8 real changes made, 8 to missing)

{com}.                         
.                         
.                         *Now replace all cat and subcat binaries with values of mean_cost
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         egen unique`i'=group(`i')
{txt}  3{com}.                                         {c )-}
{txt}(8 missing values generated)
(4 missing values generated)
(8 missing values generated)

{com}.                                         drop combo-primary_sd
{txt}
{com}.                                         rename unique* *
{res}{txt}
{com}.                                         
.                                         *STILL NEED TO REORDER VARS
.                                 foreach i of varlist combo-primary_sd {c -(}
{txt}  2{com}.                                         move `i' com_combo
{txt}  3{com}.                                 {c )-}
{txt}
{com}.                                 
.                         * Apply all mean_costs to these variables with missing obs for all      
.                                 foreach i of varlist combo-prisd_unspecified {c -(}
{txt}  2{com}.                                         replace `i'=mean_cost if `i'!=.
{txt}  3{com}.                                 {c )-}
{txt}(2 real changes made)
(6 real changes made)
(2 real changes made)
variable {bf}com_combo{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_transportation{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)
variable {bf}ope_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(4 real changes made)
variable {bf}prisd_unspecified{sf} was {bf}{res}byte{sf}{txt} now {bf}{res}float{sf}
{txt}(2 real changes made)

{com}.                         *
.                                 * Fix shitty variable name
.                                                 //rename ope_building_and_equipment__main ope_bldg_equip_main
.                                                 
.                         *Finally add a prefix to these new variables si_
.                         foreach i of varlist  combo-prisd_unspecified {c -(}
{txt}  2{com}.                                 rename `i'      a_`i'           
{txt}  3{com}.                         {c )-}
{res}{txt}
{com}. *       
.         
. ** Encoding remaining variables
. *******************************
.                         
.                           
.                         
.                 * Encode categorical variables for long version
.                         foreach i of varlist cost_level disease intervention fixed_variable cost_incurred_by period output_unit_reported output_unit output_unit2 integrated_generic empirical_modeled resource_id resource_valuation price_sources full_subsidized adjustment_method data_collection recall_period output_methods data_timing inflation inflation_method amortization currency_iso currency_name {c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         encode `i', gen(`i'_1) label(`i')
{txt}  3{com}.                         move `i'_1 `i'
{txt}  4{com}.                         drop `i'
{txt}  5{com}.                         rename `i'_1 `i' 
{txt}  6{com}.                         {c )-}
{res}{txt}
{com}.                         
.                         
.                         
.                         * To add below??:
.                            *obs_fd obs_fd_rs (but these are mixed between RS and categorical and numerical
.                         
.                         
.                 * Encode reporting standards variables for long version
.                         *set trace on
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a" 4 "nr"
{txt}
{com}.                         foreach i of varlist cost_source_rs cost_allocation_method_rs resource_id_rs resource_valuation_rs price_sources_rs inputq_source_rs full_subsidized_rs adjustment_method_rs data_collection_rs recall_period_rs output_methods_rs data_timing_rs inflation_rs inflation_method_rs amortization_rs currency_rs pot_distortions_rs{c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "4" if `i'== "nr"
{txt}  7{com}.                         destring `i', replace
{txt}  8{com}.                                 label values `i' rs
{txt}  9{com}.                         *consider changing label for NR to .    
.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
cost_allocation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_id_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
resource_valuation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
price_sources_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
inputq_source_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
full_subsidized_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
adjustment_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_collection_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
recall_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
output_methods_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
data_timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
inflation_method_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
amortization_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(10 real changes made)
pot_distortions_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                         
.                 * Numeric variables to recode NR to missing and destring to numeric
.                         foreach i of varlist lower_ci upper_ci std_dev median_cost lower_iqr upper_iqr input_price input_quantity program_level_cost {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i'="." if `i'=="nr" | `i'=="n/a"
{txt}  4{com}.                         destring `i', replace
{txt}  5{com}.                         {c )-}
{txt}(10 real changes made)
(10 real changes made)
lower_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_ci: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
std_dev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
median_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
lower_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
upper_iqr: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_price: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
input_quantity: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}(10 real changes made)
(10 real changes made)
program_level_cost: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(10 missing values generated)
{res}{txt}
{com}.                 *
.                 
.                 
. * Add some new variables for analysis later (these applicable to VMMC, probably not ART, TB, other)
. ********************************************
. 
.                                 * Single scale variable
.                                 gen output_pmonth=output_quantity/time_period_mo
{txt}
{com}.                                 tab output_pmonth

{txt}output_pmon {c |}
         th {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
         20 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pmonth "Site unit output per month"
{txt}
{com}. 
.                                 * Generate additional scale variable at the year level for more logic in reporting
.                                 gen output_pyear=output_pmonth*12
{txt}
{com}.                                 tab output_pyear

{txt}output_pyea {c |}
          r {c |}      Freq.     Percent        Cum.
{hline 12}{c +}{hline 35}
        240 {c |}{res}         10      100.00      100.00
{txt}{hline 12}{c +}{hline 35}
      Total {c |}{res}         10      100.00
{txt}
{com}.                                 label variable output_pyear "Site unit output per year"
{txt}
{com}. 
.                                 * Generate quadratic terms for both scale variables
.                                 gen output_pyear2=output_pyear^2
{txt}
{com}.                                 gen output_pmonth2=output_pmonth^2
{txt}
{com}. 
. 
.                                 * Try scaling up the output variable so you can see the coeff.
.                                 **************************************************************
.                                 gen output1k_mo=output_pmonth/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per month / 1000"
{txt}
{com}.                                 gen output1k_yr=output_pyear/1000
{txt}
{com}.                                 label variable output1k_mo "Site unit output per year / 1000"
{txt}
{com}. 
.                                 * And do the same things for the 1000k versions so its interpretable
.                                 gen output1k_yr2=output1k_yr^2
{txt}
{com}.                                 label variable output1k_yr2 "Site unit output per year^2 / 1000"
{txt}
{com}.                                 gen output1k_mo2=output1k_mo^2
{txt}
{com}.                                 label variable output1k_mo2 "Site unit output per month^2 / 1000"
{txt}
{com}. 
.                                                 
.         
.                 * Finally rename id variable for merge
.                 * rename substudyid id
.                 save temp_dta/costs.dta,replace 
{txt}file temp_dta/costs.dta saved

{com}.                 clear all
{res}{txt}
{com}. 
. 
. * Load in and clean study-level dataset
. ****************************************
. 
. 
.                 use temp_dta/study_attributes.dta
{txt}
{com}. 
. 
.                 * DROP NR for following Variables for encoding:
.                         foreach i of varlist id_tech costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_costing omitted_costs asd_costs list_asd_costs research_costs unrelated_costs overhead_costs volunteer_time family_time currency_x ownership id_modality{c -(}
{txt}  2{com}.                                 replace `i'="" if `i'=="NR" | `i'=="nr"
{txt}  3{com}.                         {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
.                         * Generate a new country string variable so you can merge in other information later:
.                         gen country_alt=country
{txt}
{com}.                         
.                         foreach i of varlist extractor_initials article_dataset study_type econ_perspective_report econ_perspective_actual research_costs unrelated_costs overhead econ_costing real_world country geo_sampling_incountry country_sampling site_sampling px_sampling sample_size_derived timing exclusions personnel_dt iso_code currency_x traded volunteer_time family_time px_time aggregation subgroup scale scale_up seasonality sensitivity_analysis limitations coi ownership pop_sex id_class id_type id_int id_modality method px_costs_measured cat_cost costing_purpose_cat asd_costs pop_density int_description time_unit consistency controls pop_couples cd4_med tb_rx_resistance id_phase id_tech{c -(}
{txt}  2{com}.                         *replace `i' = lower(`i')
.                         replace `i'="." if `i'=="NR"
{txt}  3{com}.                         encode `i', gen(`i'_1) label(`i')
{txt}  4{com}.                         move `i'_1 `i'
{txt}  5{com}.                         drop `i'
{txt}  6{com}.                         rename `i'_1 `i' 
{txt}  7{com}.                         {c )-}
{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}(0 real changes made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(1 real change made)
{res}{txt}(0 real changes made)
{res}{txt}
{com}.                         *
. 
.                         * Additional recent variables (categorical)
.                         foreach i of varlist pop_age pop_ses pop_education tb_prev cd4_range hiv_prev {c -(}
{txt}  2{com}.                                 replace `i'="." if `i'=="NR" | `i'=="N/A"
{txt}  3{com}.                         {c )-}
{txt}(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)

{com}.                                 destring hiv_prev, replace
{txt}hiv_prev: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         
.                         * From above, there are a number that are best kept as free-text fields to be extracted as "phrases"
.                         * Then create new categorical or binary variables as appropriate. (specifically id_details, id_activities, id_tech, id_facility
. 
.                         
.                         replace coverage="" if coverage=="NR"
{txt}(1 real change made)

{com}.                                 destring coverage, replace
{txt}coverage: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace discount_rate="" if discount_rate=="NR" | discount_rate=="NA"
{txt}(1 real change made)

{com}.                                 destring discount_rate, replace
{txt}discount_rate: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                         replace location="" if location=="NR"
{txt}(0 real changes made)

{com}.                         
.                 * Reporting Standards Variables for Encoding (CAN CHANGE THIS TO *_rs for ease of coding)
.                         * should try grabbing all variables that have the "RS" ending somehow, instead of managing individual vars
.                         label define rs 1 "explicit" 2 "inferred" 3 "n/a"
{txt}
{com}.                         *set trace on
.                         foreach i of varlist costing_purpose_rs period_portrayed_rs research_costs_rs unrelated_costs_rs overhead_rs omitted_costs_rs geo_incountry_rs econ_costing_rs geo_sampling_incountry_rs country_sampling_rs site_sampling_rs px_sampling_rs timing_rs discount_rate_rs currency_yr_rs currency_x_rs currency_period_rs volunteer_time_rs family_time_rs px_time_rs aggregationrs management_rs ownership_rs pop_sex_rs pop_ses_rs pop_education_rs year_intro_rs coverage_rs qual_indicator_rs breakdown_input_rs breakdown_activity_rs breakdown_funder_rs px_costs_measured_rs cat_cost_rs asd_costs_rs real_world_rs personnel_dt_rs pop_age_rs {c -(}
{txt}  2{com}.                         replace `i' = lower(`i')
{txt}  3{com}.                         replace `i' = "1" if `i'== "explicit"
{txt}  4{com}.                         replace `i' = "2" if `i'== "inferred"
{txt}  5{com}.                         replace `i' = "3" if `i'== "n/a"
{txt}  6{com}.                         replace `i' = "" if `i'== "nr"
{txt}  7{com}.                         replace `i' = "" if `i'== "none"
{txt}  8{com}.                         destring `i', replace
{txt}  9{com}.                                 label values `i' rs
{txt} 10{com}.                         {c )-}
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
costing_purpose_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
period_portrayed_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
research_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
unrelated_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
overhead_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
omitted_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
geo_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
econ_costing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
geo_sampling_incountry_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
country_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
site_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_sampling_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
timing_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
discount_rate_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_yr_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_x_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
currency_period_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
volunteer_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
family_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
px_time_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
aggregationrs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
management_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
ownership_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_sex_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_ses_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_education_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
year_intro_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
coverage_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
qual_indicator_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
breakdown_input_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_activity_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
breakdown_funder_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
px_costs_measured_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
cat_cost_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
asd_costs_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
real_world_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
personnel_dt_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
pop_age_rs: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 missing value generated)
{res}{txt}
{com}.                                 
.                         *consider changing label for NR to .    
. 
. * And destring remaining numeric variables:
.                         *Years
.                         /*
>                         foreach i of varlist start_year end_year year_intro ref_year{c -(}
>                                 replace `i'=lower(`i')
>                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na" | `i'=="no year"
>                                 destring `i', replace
>                                 {c )-}
>                         */
.                         *Months
.                         foreach i of varlist start_month end_month{c -(}
{txt}  2{com}.                                 replace `i'=lower(`i')
{txt}  3{com}.                                 replace `i'="1" if `i'=="january"
{txt}  4{com}.                                 replace `i'="2" if `i'=="february"
{txt}  5{com}.                                 replace `i'="3" if `i'=="march"
{txt}  6{com}.                                 replace `i'="4" if `i'=="april"
{txt}  7{com}.                                 replace `i'="5" if `i'=="may"
{txt}  8{com}.                                 replace `i'="6" if `i'=="june"
{txt}  9{com}.                                 replace `i'="7" if `i'=="july"
{txt} 10{com}.                                 replace `i'="8" if `i'=="august"
{txt} 11{com}.                                 replace `i'="9" if `i'=="september"
{txt} 12{com}.                                 replace `i'="10" if `i'=="october"
{txt} 13{com}.                                 replace `i'="11" if `i'=="november"
{txt} 14{com}.                                 replace `i'="12" if `i'=="december"
{txt} 15{com}.                                 replace `i'="" if `i'=="n/a" | `i'=="nr" |  `i'=="na"
{txt} 16{com}.                                 destring `i', replace
{txt} 17{com}.                                 {c )-}
{txt}(1 real change made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
start_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(1 real change made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
end_month: all characters numeric; {res}replaced {txt}as {res}byte
{txt}
{com}. 
.                 
.                 * id_facility (coding structure, from codebook)
.                 
.                                 *Create meta_category
.                                 gen meta_facility=.
{txt}(1 missing value generated)

{com}.                                 replace meta_facility=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" | id_facility=="HC06" | id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(1 real change made)

{com}.                                 replace meta_facility=2 if id_facility=="OR01" | id_facility=="OR02" | id_facility=="OR03" | id_facility=="OR04" | id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace meta_facility=5 if id_facility=="OT01" | id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 label define meta_facility 1 "Heath Care (service at fixed location)" 2 "Outreach (service in comm org/ elsewhere)" 3 "Community-based (org located in community)" 4 "Population wide" 5 "Other or not reported"
{txt}
{com}.                                 label values meta_facility meta_facility
{txt}
{com}.                                 label var meta_facility "Broad Facility Category"
{txt}
{com}.                                 
.                         *Now create numeric for better encoding 
.                         gen facility_cat=.
{txt}(1 missing value generated)

{com}.                                 replace facility_cat=   101     if id_facility=="HC01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   102     if id_facility=="HC02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   103     if id_facility=="HC03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   104     if id_facility=="HC04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   105     if id_facility=="HC05"
{txt}(1 real change made)

{com}.                                 replace facility_cat=   107     if id_facility=="HC07"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   108     if id_facility=="HC08"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   109     if id_facility=="HC09"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   110     if id_facility=="HC10"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   111     if id_facility=="HC11"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   201     if id_facility=="OR01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   202     if id_facility=="OR02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   203     if id_facility=="OR03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   204     if id_facility=="OR04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   205     if id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   301     if id_facility=="CB01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   302     if id_facility=="CB02"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   303     if id_facility=="CB03"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   304     if id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   401     if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   501     if id_facility=="OT01"
{txt}(0 real changes made)

{com}.                                 replace facility_cat=   502     if id_facility=="OT02"
{txt}(0 real changes made)

{com}.                                 
.                                         label define facility_cat 101 "Health Post (e.g. health outpost, etc.)" 102 "Health Center (e.g. community health clinic - sometimes w/ 1-2 beds)" 103 "Clinic at hospital (not intervention- or disease-specific)" 104 "Clinic at hospital (intervention- or disease-specific)" 105 "Hospital - Primary (district)" 107 "Hospital - Secondary (regional, specialist)" 108 "Hospital - Tertiary (teaching)" 109 "Hospital - Level Unspecified" 110 "Mix of health care facility types" 111 "Unspecified health care facility type" 201 "Mobile clinic (van, truck, etc.)" 202 "Temporary site in community building" 203 "Camp (e.g. tents for a week)" 204 "At client residences (targeted or door-to-door)" 205 "In at-risk setting (e.g. in brothel, bar, etc.)" 301 "Community center" 302 "School" 303 "Workplace" 304 "Other Community facility (e.g. religious center)" 401 "No facility (e.g. legislation, human rights advocacy, mass media)" 501 "Other facility type - specify in comments" 502 "Facility type is not reported"
{txt}
{com}.                                         label values facility_cat facility_cat
{txt}
{com}.                                         label variable facility_cat "Narrow Facility Category"
{txt}
{com}.         
.         
.                         *Finally, can we create mid-level variables for type of facility:
.                         gen fac_type=.
{txt}(1 missing value generated)

{com}.                                 replace fac_type=1 if facility_cat==101 | facility_cat==102
{txt}(0 real changes made)

{com}.                                 replace fac_type=2 if facility_cat==103 | facility_cat==104
{txt}(0 real changes made)

{com}.                                 replace fac_type=3 if facility_cat==105 | facility_cat==107 | facility_cat==108 | facility_cat==108 | facility_cat==109
{txt}(1 real change made)

{com}.                                 replace fac_type=4 if facility_cat==110 | facility_cat==111
{txt}(0 real changes made)

{com}.                                 replace fac_type=5 if meta_facility==2
{txt}(0 real changes made)

{com}.                                 replace fac_type=6 if meta_facility==3
{txt}(0 real changes made)

{com}.                                 replace fac_type=7 if meta_facility==4
{txt}(0 real changes made)

{com}.                                 replace fac_type=8 if meta_facility==5
{txt}(0 real changes made)

{com}.                                 label define fac_type 1 "Clinics" 2 "Integrated clinics" 3 "Hospitals" 4 "HC unspecified/other" 5 "Mobile outreach" 6 "Community-based" 7 "Population level" 8 "Other/Unspecified" 
{txt}
{com}.                                 label values fac_type fac_type
{txt}
{com}.                                         label variable fac_type "Facility Type for Analysis"
{txt}
{com}.                                 
.                                 
.                         * And binaries for facility_type
.                         tab fac_type, gen(v_)

   {txt}Facility Type for {c |}
            Analysis {c |}      Freq.     Percent        Cum.
{hline 21}{c +}{hline 35}
           Hospitals {c |}{res}          1      100.00      100.00
{txt}{hline 21}{c +}{hline 35}
               Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 hospitals
{res}{txt}
{com}.                                                         
.                         * And binaries for faclity_category
.                         tab facility_cat, gen(v_)

               {txt}Narrow Facility Category {c |}      Freq.     Percent        Cum.
{hline 40}{c +}{hline 35}
          Hospital - Primary (district) {c |}{res}          1      100.00      100.00
{txt}{hline 40}{c +}{hline 35}
                                  Total {c |}{res}          1      100.00
{txt}
{com}.                                 rename v_1 primary_hospital
{res}{txt}
{com}. 
.         
.         * Save progress
.         save temp_dta/study_attributes.dta,replace      
{txt}file temp_dta/study_attributes.dta saved

{com}.         
. 
. *************************************************************************
. * Part II
. * Above, everything from cost_data sheet is encoded and ready for merging
. * Below, we create two separate datasets for analysis
. *               1. Long DS with each row = cost input, combined with study level data
. *               2. Wide DS with each row as a study, collapsed and combined with study level data
. *************************************************************************
. 
. 
.         * II.1 - Create Long Dataset (simply load in clean study_attributes data)
.         *************************************************************************
.         
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}.                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.         merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}              10{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                 order extractor_initials-consistency_rmk
{txt}
{com}.                 order id
{txt}
{com}.                                 drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                 drop _merge
{txt}
{com}.         
.                                 save final_dtas/long_file.dta, replace
{txt}file final_dtas/long_file.dta saved

{com}.                                 *This dataset may require some additional cleaning and culling for appropriate use
.                                 
.         * II.2 - Create Wide Dataset (collapse by unit_cost and add study_attributes data)
.         **********************************************************************************
.         clear
{txt}
{com}.         use temp_dta/costs.dta
{txt}
{com}. 
.         
.         * First set up the desired order of the collapsed cost variable with markers
.                         *Broad as reported costs
.                                 gen broad_asreported=.
{txt}(10 missing values generated)

{com}.                                 move broad_asreported ar_capital
{txt}
{com}.                         *Narrow as reported costs
.                                 gen narrow_asreported=.
{txt}(10 missing values generated)

{com}.                                 move narrow_asreported ar_cap_admin_equip
{txt}
{com}.                         
.                         *Broad Standardized Input costs
.                                 gen broad_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move broad_stdinput si_combined
{txt}
{com}.                                 
.                         * Narrow Standardized Input costs
.                                 gen narrow_stdinput=.
{txt}(10 missing values generated)

{com}.                                 move narrow_stdinput si_com_unit_cost
{txt}
{com}.                         
.                                 
.                         *Broad Activity Costs
.                                 gen broad_activity=.
{txt}(10 missing values generated)

{com}.                                 move broad_activity a_combo
{txt}
{com}.                 
.                         * Narrow Activity costs
.                                 gen narrow_activity=.
{txt}(10 missing values generated)

{com}.                                 move narrow_activity a_com_combo
{txt}
{com}.                         
.         
.                         save temp_dta/costs.dta, replace
{txt}file temp_dta/costs.dta saved

{com}. 
. 
. 
.                 * Collapse for reshape wide 
.                 * (here, in two parts,  1) collapse cost variables, and 
.                 *                                               2) remove non-total rows for all categorical variables).
.                 ************************************************************************************
. 
.                         *1. Collapse cost variables into new dataset
.                         *Need to collapse one var at a time and append to a new dataset
.                                 collapse broad_asreported, by (unit_cost)
{txt}
{com}.                                 save temp_dta/costs_temp.dta,replace
{txt}file temp_dta/costs_temp.dta saved

{com}.                                         clear
{txt}
{com}.                                         use temp_dta/costs.dta
{txt}
{com}.                                 *set trace on
.                                 foreach i of varlist ar_capital-a_prisd_unspecified {c -(}
{txt}  2{com}.                                                 bysort unit_cost (`i') : gen miss = mi(`i'[1])
{txt}  3{com}.                                                 collapse (sum) `i' (min) miss, by (unit_cost)
{txt}  4{com}.                                                 replace `i'=. if miss==1
{txt}  5{com}.                                                         drop miss
{txt}  6{com}.                                                 merge 1:1 unit_cost using temp_dta/costs_temp.dta
{txt}  7{com}.                                                         drop _merge
{txt}  8{com}.                                                         save temp_dta/costs_temp.dta,replace
{txt}  9{com}.                                                                 clear
{txt} 10{com}.                                                 use temp_dta/costs.dta
{txt} 11{com}.                                                 {c )-}
{txt}(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(2 real changes made, 2 to missing)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved
(0 real changes made)
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}
file temp_dta/costs_temp.dta saved

{com}.                                                 *
.                         *2. Now collapse all of the categorical variables just by total
.                                 drop ar_capital-a_prisd_unspecified
{txt}
{com}.                                 keep if ar_narrow1=="full costing total" | ar_narrow1=="partial costing"
{txt}(8 observations deleted)

{com}.                                         save temp_dta/c_categoricals.dta,replace
{txt}file temp_dta/c_categoricals.dta saved

{com}.                                         merge m:1 unit_cost using temp_dta/costs_temp.dta
{res}
{txt}{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                                                         drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                                                         * In this case, drops 6 that we dont want anyway
.                                                         drop _merge
{txt}
{com}.                                                         
.                                 * reorder for ease of finding 
.                                 * (This could be done in a better way, problem is the above procedure reverses the order)       
.                                 /*
>                                 order id unit_cost broad_asreported ar_broad ar_capital ar_facility ar_overhead ar_personnel ar_recurring_goods ar_recurring_services ar_subtotal ar_total ar_unspecified ar_narrow narrow_asreported ar_cap_medical_equipment ar_cap_non_consumable_supplies ar_cap_non_medical_equipment ar_cap_unspecified ar_fac_building ar_fac_maint_and_util ar_fac_rental ar_fac_waste_management ar_ove_unspecified ar_per_admin_support ar_per_nurses ar_per_physicians ar_per_service_delivery ar_per_unspecified ar_recgoods_clinical_consumables ar_recgoods_consumables ar_recgoods_nclinical_consum ar_recservices_hct ar_recservices_adverse_events ar_recservices_consultancy ar_recservices_demand_generation ar_recservices_inpatient ar_recservices_lab_test ar_recservices_mgmt ar_recservices_sterilization ar_recservices_supply_chain ar_recservices_training ar_recservices_transport ar_sub_subtotal ar_tot_full_costing_total ar_tot_partial_costing ar_uns_unspecified broad_stdinput si_broad si_capital si_mixed si_personnel si_recurrent narrow_stdinput si_narrow si_cap_medical_equip si_cap_nonmed_equip si_cap_other si_mix_mixed si_per_mixed_unspec si_per_service_delivery si_per_support si_rec_building_space si_rec_med_int_supplies si_rec_nonmed_int_supplies broad_activity a_broad a_ancillary a_mixed a_operational a_primary_sd a_secondary_sd narrow_activity a_narrow a_anc_demand_generation a_anc_lab_services a_anc_unspecified a_mix_mixed a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_unspecified a_prisd_circumcision_proced a_prisd_unspecified a_secsd_hct output_pmonth output_pyear output_pyear2 output_pmonth2 output1k_mo output1k_yr output1k_yr2 output1k_mo2      
>                                                 */
.                                                 
.                                 * First label organizational variables after resort
.                                 label variable broad_asreported "----------------------------------"
{txt}
{com}.                                 label variable narrow_asreported "----------------------------------"
{txt}
{com}.                                 label variable broad_stdinput "----------------------------------"      
{txt}
{com}.                                 label variable narrow_stdinput "----------------------------------"
{txt}
{com}.                                 label variable broad_activity "----------------------------------"
{txt}
{com}.                                 label variable narrow_activity "----------------------------------"
{txt}
{com}.                         
.                                 * Generate a Unit Cost Total "uc_total"
.                                 move mean_cost ar_broad
{txt}
{com}.                                 
.                                 * Finally merge in study_attribute dataset
.                                 merge m:1 id using temp_dta/study_attributes.dta
{res}{txt}(label rs already defined)

{col 5}Result{col 38}# of obs.
{col 5}{hline 41}
{col 5}not matched{col 30}{res}               0
{txt}{col 5}matched{col 30}{res}               2{txt}  (_merge==3)
{col 5}{hline 41}

{com}.                                         drop if _merge!=3
{txt}(0 observations deleted)

{com}.                                                 * In this case it drops the 6 sub-studies that we dont want
.                                                 drop _merge
{txt}
{com}.                         
.                         
.                         *Final cleaning and creation of organizational variables
.                         *********************************************************
.                         drop cost_record subset_of ar_narrow1 ar_broad1 si_narrow1 si_broad1 a_narrow1 a_broad1
{txt}
{com}.                         
.                         * Save version before importing GDPPC data:
.                         save final_dtas/wide_file.dta, replace
{txt}file final_dtas/wide_file.dta saved

{com}.                         
.                         * Finally, import GDPPC data for each study.
.                         ********************************************
.                                 * Underlying dataset can be found at https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
.                                 * Simply download EXCEL file option for ALL countries (should be default). 
.                                 * Download for this presentation was done on 25 October 2017
.                                 * File name is: API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls
.                                 * place file in path along with data extraction template
.                                 * Presumably formatting for this file shouldnt change year-to-year, but possible 
.                                 * ...so check that import and file manipulation commands below work. 
.                 
.                         save "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files/pat_tracking_wide_file_Apr2018.dta", replace
{txt}(note: file /Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files/pat_tracking_wide_file_Apr2018.dta not found)
file /Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files/pat_tracking_wide_file_Apr2018.dta saved

{com}.                         
.                         /*
>                         clear
> 
>         *Change directory to pull in outside data
>         cd "/Users/dcameron03/Documents/Berkeley/`GSI with Jim/Stata/GHCC/"
>                         
>                         import excel "API_NY.GDP.PCAP.CD_DS2_en_excel_v2.xls", firstrow sheet("Data") cellrange(A4) case(l)
>                                                 // Years wont translate to varnames, but will be retained as labels for cols e-bi
>                                                 // Need to manually rename the Years row (4) from #### to y####
>                                                 drop countrycode-y1999
>                                 STOP            
>                         *global years y2000-y2016
>                         reshape long y, i(countryname) j(year_d)
>                         rename y gdppc
>                         rename year_d currency_yr
>                         rename countryname country_alt
>                         save VMMC/temp_dta/gdppc.dta, replace
>                         
>                         clear
>                         
>                         *Now merge in the GDPPC data you've created: 
>                         use VMMC/final_dta/wide_file.dta
>                         
>                         merge m:1 country_alt currency_yr using "VMMC/temp_dta/gdppc.dta"
>                                 drop if _merge==2
>                                 drop _merge
>                                 
>                                 
>                         move gdppc country
>                         
>                         
>                         save VMMC/final_dta/wide_file.dta, replace
> 
>                         
> * And Binaries and amounts of global fund (GFAMTB) and PEPFAR funding
>         ** For dataset for this process visit: <http://ghdx.healthdata.org/record/development-assistance-health-database-1990-2015>.
>         ** To do this you will need to maintain a string variable with the country names in the same format as the WB country names.
> 
>                         clear
>                         use external_data/IHME_DAH_DATABASE_1990_2015_Y2016M04D25.DTA
> 
>                         * Get rid of unnecessary data
>                                 drop if year<2000
>                                 drop if channel!="BIL_USA" & channel!="GFATM"
>                                 gen hiv_funding=hiv_dah_15+hiv_treat_dah_15+hiv_prev_dah_15+hiv_pmtct_dah_15+hiv_ovc_dah_15+hiv_care_dah_15+hiv_ct_dah_15+hiv_unid_dah_15+hiv_tb_dah_15+hiv_hss_dah_15
>                                 
>                                 gen pepfar=0
>                                         replace pepfar=1 if channel=="BIL_USA" & year>2002 & hiv_funding!=0
>                                         label var pepfar "Country recieved PEPFAR funding y/n"
>                                 
>                                 gen pepfar_amt=0
>                                         replace pepfar_amt=hiv_dah_15 if channel=="BIL_USA" & year>2002 
>                                         label var pepfar_amt "Amnt of PEPFAR funding 2016 USD"
>                                 
>                                 gen global_fund=0
>                                         replace global_fund=1 if dah_15!=0 & channel=="GFATM"
>                                         label var global_fund "Country recieved Global Fund funding y/n"
>                                 
>                                 gen global_fund_amt=0
>                                         replace global_fund_amt=dah_15 if channel=="GFATM"
>                                         label var global_fund_amt "Amnt of GF funding 2016 USD"
>                                 
>                                 keep year recipient_country pepfar pepfar_amt global_fund global_fund_amt
>                                 rename year currency_yr
>                                 rename recipient_country country_alt
>                                 
>                 * Inflate to 2016 dollars using the GDP Price Deflator          
>                 gen gdp_current = 111.416                               
>                                 gen gdp_old=.                           
>                                         replace gdp_old=        66.773  if currency_yr==        1990
>                                         replace gdp_old=        68.996  if currency_yr==        1991
>                                         replace gdp_old=        70.569  if currency_yr==        1992
>                                         replace gdp_old=        72.248  if currency_yr==        1993
>                                         replace gdp_old=        73.785  if currency_yr==        1994
>                                         replace gdp_old=        75.324  if currency_yr==        1995
>                                         replace gdp_old=        76.699  if currency_yr==        1996
>                                         replace gdp_old=        78.012  if currency_yr==        1997
>                                         replace gdp_old=        78.859  if currency_yr==        1998
>                                         replace gdp_old=        80.065  if currency_yr==        1999
>                                         replace gdp_old=        81.887  if currency_yr==        2000
>                                         replace gdp_old=        83.754  if currency_yr==        2001
>                                         replace gdp_old=        85.039  if currency_yr==        2002
>                                         replace gdp_old=        86.735  if currency_yr==        2003
>                                         replace gdp_old=        89.12   if currency_yr==        2004
>                                         replace gdp_old=        91.988  if currency_yr==        2005
>                                         replace gdp_old=        94.814  if currency_yr==        2006
>                                         replace gdp_old=        97.337  if currency_yr==        2007
>                                         replace gdp_old=        99.246  if currency_yr==        2008
>                                         replace gdp_old=        100             if currency_yr==        2009
>                                         replace gdp_old=        101.221 if currency_yr==        2010
>                                         replace gdp_old=        103.311 if currency_yr==        2011
>                                         replace gdp_old=        105.214 if currency_yr==        2012
>                                         replace gdp_old=        106.913 if currency_yr==        2013
>                                         replace gdp_old=        108.832 if currency_yr==        2014
>                                         replace gdp_old=        110.012 if currency_yr==        2015
>                                                                 
>                                         replace global_fund_amt=global_fund_amt*(gdp_current/gdp_old)           
>                                         replace pepfar_amt=pepfar_amt*(gdp_current/gdp_old)     
>                                                 drop gdp_current gdp_old
>                                 collapse (sum) pepfar_amt global_fund_amt (max) pepfar global_fund, by(country_alt currency_yr)
>                                 
>                                 save VMMC/temp_dta/pepfar_gf_data.dta, replace
>                                 clear
>                                 use VMMC/final_dta/wide_file.dta
>                                 
>                                 merge m:1 country_alt currency_yr using "VMMC/temp_dta/pepfar_gf_data.dta"
>                                         drop if _merge==2
>                                         * There are problems here because missing data for South Africa (2014) and Zimbabwe (2014, 2015)
>                                         * Will need to check for other missing values by looking at data that didnt merge from master. 
>                                                 *Based on patterns, I assume:
>                                                 replace pepfar=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="Zimbabwe" & currency_yr>2013
>                                                 replace pepfar=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 replace global_fund=1 if country_alt=="South Africa" & currency_yr>2013
>                                                 drop _merge
>                                                 drop country_alt
>                                                 
>                         save VMMC/final_dta/wide_file.dta, replace                                              
> 
>         STOP
>                         
>         *** Finally, also add in the line that saves a copy of ART to the GitHub folder for Lily to see it                      
>         cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
>         save VMMC_wide_file.dta, replace                
>                                 
>                                 
>                                 
> ** STOP HERE                    
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         
>                         

{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. 
{txt}end of do-file

{com}. br si*

. br si_*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}. 
{txt}end of do-file

{com}. br

. br a_*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combined if check == 0
{err}a_combined not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope combo" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{err}variable a_combo_* not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
{txt}end of do-file

{com}. br flag*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
. 
{txt}end of do-file

{com}. br si_per*

. br si_rec*

. br si_cap*
{err}variable si_cap* not found
{txt}{search r(111), local:r(111);}

{com}. br si_*

. br a_prisd*

. br a_ope*

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified 
{err}=exp required
{txt}{search r(100), local:r(100);}

end of do-file

{search r(100), local:r(100);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnosis") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         replace screen_diag_flag = 1 if screening_diagnoses != "." & (!(strmatch(id_activities, "*iagnoses*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         
. 
. 
. **************************************************************************              
. ** Order variables 
. **************************************************************************              
. 
. order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
{err}variable {bf}si_unspecified{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnosis") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         replace screen_diag_flag = 1 if screening_diagnoses != "." & (!(strmatch(id_activities, "*iagnoses*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
. 
{txt}end of do-file

{com}. br *_flag

. br screening_diagnoses id_activities if screen_diag_flag == 1 

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         replace screen_diag_flag = 1 if screening_diagnoses != "." & (!(strmatch(id_activities, "*iagnoses*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         /*
> 
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br *_flag

. br screening_diagnoses id_activities if screen_diag_flag == 1 

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         replace screen_diag_flag = 1 if screening_diagnoses != "." & (!(strmatch(id_activities, "*iagno*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         /*
> 
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         /*
> 
>         replace screen_diag_flag = 1 if screening_diagnoses != "." & (!(strmatch(id_activities, "*iagno*")))
>         
>         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
>         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
>         
>         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
>         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
>         
>         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
>         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
>         
>         
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. tab screen_diag_flag
{txt}no observations

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & (!(strmatch(id_activities, "*iagno*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         
. 
. **************************************************************************              
. ** Order variables 
. **************************************************************************              
. 
. order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
{err}variable {bf}a_mix_bldg_equip{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & (!(strmatch(id_activities, "*iagno*")))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         /*
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br *_flag

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & !(strmatch(id_activities, "*iagno*"))
{txt}(2 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         /*
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br screening_diagnoses id_activities if screen_diag_flag == 1 

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
{txt}(2 real changes made)

{com}.         
.         /*
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br screening_diagnoses id_activities if screen_diag_flag == 1 

. br *_flag

. br health_system health_system_flag

. br health_system id_activities health_system_flag

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.                 /*
>         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*system*"))
>         
> 
> 
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br health_system health_system_flag

. br health_system health_system_flag

. br health_system id_activities health_system_flag

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*ystem*"))
{txt}(0 real changes made)

{com}.         
. 
. /*
> **************************************************************************              
> ** Order variables 
> **************************************************************************              
> 
> order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
> 
> 
> // only keep relevant variables 
> keep disease-a_unspecified
> 
> 
> // identify string variables in the dataset and make sure that missings are all formatted homogenously
> 
> ds, has(type string) 
> local strvars "`r(varlist)'"
> 
> foreach var of local strvars {c -(} 
>         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
> {c )-}
> 
> 
> * Finally, export!
> **************************
> save HCT_clean_wide_file_Mar2018.dta, replace
> 
> * Drew's Path
> //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
> 
> * Lily's Path
> * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
> 
> 
> 

{txt}end of do-file

{com}. br *flag

. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*ystem*"))
{txt}(0 real changes made)

{com}.         
. 
. 
. **************************************************************************              
. ** Order variables 
. **************************************************************************              
. 
. order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
{err}variable {bf}a_mix_bldg_equip{sf} not found
{txt}{search r(111), local:r(111);}

end of do-file

{search r(111), local:r(111);}

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_mix_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_mix_bldg_equip "Mixed: Building Equipment (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*ystem*"))
{txt}(0 real changes made)

{com}.         
. 
. 
. **************************************************************************              
. ** Order variables 
. **************************************************************************              
. 
. order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
{txt}
{com}. 
. 
. // only keep relevant variables 
. keep disease-a_unspecified
{txt}
{com}. 
. 
. // identify string variables in the dataset and make sure that missings are all formatted homogenously
. 
. ds, has(type string) 
{txt}{col 1}disease{col 15}id_int{col 29}screening_~s{col 43}country_sa~g{col 57}research_c~s
{col 1}collapsed{col 15}int_descri~g{col 29}community_~s{col 43}geo_sampli~y{col 57}unrelated_~s
{col 1}lead_author{col 15}clinical_m~g{col 29}health_sys~m{col 43}site_sampl~g{col 57}overhead
{col 1}output_unit2{col 15}demand_gen~n{col 29}id_activit~s{col 43}px_sampling{col 57}overhead_c~s
{col 1}title{col 15}counseling~t{col 29}id_pop_dem~d{col 43}sample_siz~d{col 57}pot_distor~s
{col 1}journal_etc{col 15}staff_type{col 29}id_pop_cli~d{col 43}controls{col 57}volunteer_~e
{col 1}url{col 15}supportive~e{col 29}pop_age{col 43}econ_persp~l{col 57}family_time
{col 1}iso_name{col 15}visits{col 29}pop_sex{col 43}econ_costing{col 57}px_costs_m~d
{col 1}location{col 15}referrals{col 29}pop_ses{col 43}real_world{col 57}cat_cost
{col 1}pop_density{col 15}method{col 29}pop_educat~n{col 43}asd_costs{col 57}iso_code
{col 1}ownership{col 15}id_tech{col 29}tb_prev{col 43}list_asd_c~s{col 57}currency_iso
{col 1}platform{col 15}treatment_~e{col 29}tb_rx_resi~e{col 43}omitted_co~s{col 57}currency_x
{col 1}facility_cat{col 15}arv_regimen{col 29}costing_pu~e{col 43}sensitivit~s{col 57}inflation
{col 1}id_class{col 15}treatment{col 29}timing{col 43}scale

{com}. local strvars "`r(varlist)'"
{txt}
{com}. 
. foreach var of local strvars {c -(} 
{txt}  2{com}.         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
{txt}  3{com}. {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
. 
. * Finally, export!
. **************************
. save HCT_clean_wide_file_Mar2018.dta, replace
{txt}(note: file HCT_clean_wide_file_Mar2018.dta not found)
file HCT_clean_wide_file_Mar2018.dta saved

{com}. 
. * Drew's Path
. //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
. 
. * Lily's Path
. * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
. 
. 
. 
. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. **************************************************************************
. **************************************************************************
. **************************************************************************
. ** Do file for export of VMMC studies to the UCSR, using select variables
. ** Lily Alexander
. ** University of Washington
. ** February 2018 
. ** lilyalexander18@gmail.com
. **************************************************************************
. **************************************************************************
. **************************************************************************
. 
. ** Data requirements
. **
. **  Must use data already formatted into wide file for GHCC analysis
. **              - These are available upon request
. **              - Procedure to be replicated for other intervention areas (ART, etc)
. **              - As well as other diseases (TB)
. **************************************************************************
. 
. set more off 
{txt}
{com}.         clear
{txt}
{com}.         *Drew's Path:
.         //cd "/Users/dcameron03/Documents/GitHub/Post-Extraction-Processing/VMMC/"
.         //use VMMC_wide_file.dta, replace       
.         *Lily's Path:
.         * cd "C:/Users/Lily Alexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/VMMC"
.         *       use VMMC_wide_file_Feb2018.dta
.         *Lily's temporary path: 
.         cd "/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files" 
{res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/Patient_tracking/wide_files
{txt}
{com}.         use pat_tracking_wide_file_Apr2018.dta, replace
{txt}
{com}. 
. 
. **********************************              
. ** Cross-validation of costs **
. **********************************
.         
.         * 1. Check that broad standard input categories sum to mean cost 
.         ****************************************************************
.         egen check = rowtotal(si_recurrent si_personnel)
{txt}
{com}.         replace check = si_combined if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1
  {res}0
{txt}
{com}.         di in red `r(N)'
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}. 
.         
.         * 2. Check that narrow standard input categories sum to broad categories
.         ************************************************************************
.         
.         local prefix "rec per" 
{txt}
{com}.                 
.         preserve 
{txt}
{com}.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(si_`var'_*)
{txt}  3{com}.                 drop si_`var'_*
{txt}  4{com}.                 gen diff_`var' = sum_`var' - si_`var'
{txt}  5{com}.                 gen flag_`var' = 1 if diff_`var' > 0.05 & diff_`var' !=. 
{txt}  6{com}.         
.         {c )-}
{txt}(2 missing values generated)
(2 missing values generated)

{com}.         restore
{txt}
{com}.         
.         * 3. Check that broad activity categories sum to mean cost 
.         **********************************************************
.         
.         egen check = rowtotal(a_primary_sd a_operational)
{txt}
{com}.         replace check = a_combo if check == 0
{txt}(0 real changes made)

{com}.         gen diff = check - mean_cost
{txt}
{com}.         gen flag = 1 if diff > 0.1
{txt}(2 missing values generated)

{com}.         
.         count if flag == 1 
  {res}0
{txt}
{com}.         di in red `r(N)' 
{res}{err}0
{txt}
{com}.         
.         drop diff check flag 
{txt}
{com}.         
.         * 4. Check that narrow activity categories sum to broad categories
.         ******************************************************************
.         
.         local prefix "prisd ope com" 
{txt}
{com}.         
.         //preserve 
.         
.         foreach var of local prefix {c -(} 
{txt}  2{com}.                 egen sum_`var' = rowtotal(a_`var'_*) 
{txt}  3{com}.                 
.         {c )-}
{txt}
{com}.         
.         gen diff_prisd = sum_prisd - a_primary_sd 
{txt}
{com}.         gen flag_prisd = 1 if diff_prisd > 0.05 & diff_prisd != . 
{txt}(2 missing values generated)

{com}. 
.         gen diff_ope = sum_ope - a_operational 
{txt}
{com}.         gen flag_ope = 1 if diff_ope > 0.05 & diff_ope != . 
{txt}(2 missing values generated)

{com}.         
.         gen diff_com = sum_com - a_combo
{txt}
{com}.         gen flag_com = 1 if diff_com > 0.05 & diff_com != . 
{txt}(2 missing values generated)

{com}. 
. 
. 
.         
. 
. **************************************************************************              
. ** First, export of whole raw data before compression / aggregation
. **************************************************************************
. ** Begin by selecting key variables for export
.                 
.                 label var disease "Disease" 
{txt}
{com}.                 label var output_unit2 "Output unit"
{txt}
{com}.                 
.                 * Identifiers
.                 **************
.                 label var id "ID Variable"
{txt}
{com}.                 label var unit_cost "Unit Cost ID"
{txt}
{com}.                 
.                 *Bibliographic variables
.                 ************************
.                 label var lead_author "Lead Author"
{txt}
{com}.                 label var ref_year "Reference Year"
{txt}
{com}.                 label var title "Title"
{txt}
{com}.                 label var journal_etc "Journal"
{txt}
{com}.                 label var url "URL"
{txt}
{com}. 
.                 * Geography
.                 ************
.                 label var iso_name "Country"
{txt}
{com}.                 label var pop_density "Urbanicity"
{txt}
{com}.                 label var location "Location"   
{txt}
{com}.                 label var no_sites "Sites"
{txt}
{com}.                 
.                 *Intervention variables
.                 ***********************
.                 label var ownership "Ownership"
{txt}
{com}.                 
.                 * Generate a higher-level platform variable
.                         gen platform=.
{txt}(2 missing values generated)

{com}.                                 replace platform=1 if id_facility=="HC01" | id_facility=="HC02" | id_facility=="HC03" | id_facility=="HC04" | id_facility=="HC05" |  id_facility=="HC06" |  id_facility=="HC07" | id_facility=="HC08" | id_facility=="HC09" | id_facility=="HC10" | id_facility=="HC11"
{txt}(2 real changes made)

{com}.                                 replace platform=2 if id_facility=="OR01" | id_facility=="OR02" |  id_facility=="OR03" |  id_facility=="OR04" |  id_facility=="OR05"
{txt}(0 real changes made)

{com}.                                 replace platform=3 if id_facility=="CB01" | id_facility=="CB02" | id_facility=="CB03" | id_facility=="CB04"
{txt}(0 real changes made)

{com}.                                 replace platform=4 if id_facility=="PW01"
{txt}(0 real changes made)

{com}.                                 replace platform=5 if id_facility=="OT01" |id_facility=="OT02"
{txt}(0 real changes made)

{com}.                         
.                         label variable platform "Platform"
{txt}
{com}.                         label define platform 1 "Fixed facility" 2 "Outreach" 3 "Community based" 4 "Population wide" 5 "Other"
{txt}
{com}.                         label values platform platform
{txt}
{com}.                         
.                 label var facility_cat "Platform specificity" 
{txt}
{com}.                 label var id_class "Intervention Category"
{txt}
{com}.                 label var id_int "Intervention"         
{txt}
{com}.                 label var int_description_long "Intervention Description (Long)"
{txt}
{com}.                 label var clinical_monitoring "Clinical monitoring" 
{txt}
{com}.                 label var demand_generation "Demand generation" 
{txt}
{com}.                 label var counseling_content "Counseling content"
{txt}
{com}.                 label var staff_type "Staff type & number"
{txt}
{com}.                 label var supportive_care "Supportive care"
{txt}
{com}.                 label var visits "Visit type & number"
{txt}
{com}.                 label var referrals "Referrals"
{txt}
{com}.                 label var method "Method"
{txt}
{com}.                 label var id_tech "Technology"
{txt}
{com}.                 label var treatment_phase "Treatment phase"
{txt}
{com}.                 label var arv_regimen "ARV Regimen" 
{txt}
{com}.                 label var treatment "Treatment" 
{txt}
{com}.                 label var screening_diagnoses "Screening and diagnosis"
{txt}
{com}.                 label var community_awareness "Community awareness"
{txt}
{com}.                 label var id_activities "Costed activities"
{txt}
{com}.                 
.                 label var start_month "Start Month"
{txt}
{com}.                 label var start_year "Start Year"
{txt}
{com}.                 label var end_month "End Month"
{txt}
{com}.                 label var end_year "End Year"
{txt}
{com}.                 label var period_portrayed "Total Months"
{txt}
{com}.                 label var year_intro "Year introduced at study site"
{txt}
{com}.                 label var coverage "Coverage"
{txt}
{com}.                 
. 
.                 *Population
.                 ************
.                 label var id_pop_dem_std "Target group (demographic)"
{txt}
{com}.                 label var id_pop_clin_std "Target group (clinical)"
{txt}
{com}.                 label var pop_age "Average Age"
{txt}
{com}.                 label var pop_sex "Gender"
{txt}
{com}.                 label var pop_ses "SES"
{txt}
{com}.                 label var pop_education "Education"
{txt}
{com}.                 label var hiv_prev "HIV Prevalence"
{txt}
{com}.                 label var tb_prev "TB Prevalence"
{txt}
{com}.                 label var tb_rx_resistance "TB Drug Resistance"
{txt}
{com}.                  
.                 replace pop_age = subinstr(pop_age, "years", "", .)
{txt}(0 real changes made)

{com}.                 
.                 * Study Design
.                 ***************
.                 label var costing_purpose "Costing Purpose"
{txt}
{com}.                 label var timing "Timing"
{txt}
{com}.                 label var country_sampling "Country Sampling"
{txt}
{com}.                 label var geo_sampling_incountry "Geographic Area In Country Sampling"
{txt}
{com}.                 label var site_sampling "Site Sampling"
{txt}
{com}.                 label var px_sampling "Patient Sampling"
{txt}
{com}.                 label var sample_size_derived "Sample size formally derived"
{txt}
{com}.                 label var controls "Controls"
{txt}
{com}.         
.         /*
>         *Need to replace all missing values in categoricals with 999 so we can label them "."
>         foreach i of varlist ownership platform id_class id_type id_modality disease id_tech id_phase int_services country region pop_density pop_sex costing_purpose_cat timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_report econ_perspective_actual econ_costing real_world asd_costs research_costs unrelated_costs overhead volunteer_time family_time iso_code currency_x {c -(}
>                         replace `i'=999 if `i'==.
>                         label define `i' 999 ".", add
>                         {c )-}
>         
>         *Need to do same with string variables
>         foreach i of varlist id unit_cost lead_author ref_author title journal_etc url id_facility id_details int_description_long location ss_unique_trait id_pop_std pop_age pop_ses pop_education hiv_prev cd4_range tb_prev list_asd_costs overhead_costs uncertainty_rmk {c -(}
>                 replace `i'="." if `i'==""
>                 {c )-}
>         */
.         
.                 * Costing methods
.                 *******************
.                 label var econ_perspective_actual "Perspective"
{txt}
{com}.                 label var econ_costing "Economic / Financial"
{txt}
{com}.                 label var real_world "Real World / Per Protocol"
{txt}
{com}.                 label var asd_costs "Above Service Costs Included"
{txt}
{com}.                 label var list_asd_costs "Above Service Cost List"
{txt}
{com}.                 label var omitted_costs "Omitted Costs"
{txt}
{com}.                 label var sensitivity_analysis "Sensitivity Analysis"
{txt}
{com}.                 label var scale "Economies of scale"
{txt}
{com}.                 
.                 label var research_costs "Research Costs Included"
{txt}
{com}.                 label var unrelated_costs "Unrelated Costs Included"
{txt}
{com}.                 label var overhead "Overhead Costs Included"
{txt}
{com}.                 label var overhead_costs "Overhead Costs List"
{txt}
{com}.                 label var pot_distortions "Potential distortions"
{txt}
{com}.                 
.                 label var volunteer_time "Valuing Volunteer Time"
{txt}
{com}.                 label var family_time "Valuing Family Time"
{txt}
{com}.                 label var px_costs_measured "Patient-Incurred Costs Measured"
{txt}
{com}.                 label var cat_cost "Catastrophic Cost Calculated"
{txt}
{com}.                 
.                 label var currency_yr "Reported Currency Year"
{txt}
{com}.                 label var iso_code "Reported Currency"
{txt}
{com}.                 label var currency_iso "Currency of Data Collection"
{txt}
{com}.                 label var currency_x "Currency Exchange Method"
{txt}
{com}.                 label var current_x_rate "Currency Exchange Rate"
{txt}
{com}.                 label var discount_rate "Discount Rate"
{txt}
{com}.                 label var inflation "Inflation rate"
{txt}
{com}.                 
.                         
.                 * Finally, relabel the cost categories
.                 ***************************************
.                 
.                 * Label remaining confusing variables
.                 label var mean_cost     "Mean Unit Cost"
{txt}
{com}.                 
.                 // Personnel
.                 label var si_personnel "Personnel (SI)"
{txt}
{com}.                 label var si_per_service_delivery "Personnel: Direct Service Delivery (SI)"
{txt}
{com}. 
.                 // Recurrent
.                 label var si_recurrent "Recurrent Goods (SI)"
{txt}
{com}.                 label var si_rec_other "Recurring: Other (SI)"
{txt}
{com}.                 label var si_rec_nonmed_int_supplies "Recurring: Non-medical Supplies (SI)"
{txt}
{com}.         
.                 // Activities 
.                 label var a_primary_sd "Primary Service Delivery (A)"
{txt}
{com}.                 label var a_prisd_unspecified "Primary SD: Unspecified (A)"
{txt}
{com}. 
.                 label var a_operational "Operational (A)"
{txt}
{com}.                 label var a_ope_unspecified "Operational: Unspecified (A)"
{txt}
{com}.                 label var a_ope_transportation "Operational: Transportation (A)"
{txt}
{com}.                 
. 
.                 * Create the missing columns 
.                 ******************************
.         
.                 gen si_rec_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_mixed "Recurring: Mixed (SI)" 
{txt}
{com}.                 
.                 gen si_rec_med_int_supplies = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_med_int_supplies "Recurring: Medical Supplies (excluding drugs) (SI)"
{txt}
{com}.                 
.                 gen si_rec_key_drugs = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_key_drugs "Recurring: Supplies (key drugs) (SI)" 
{txt}
{com}.                 
.                 gen si_rec_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_rec_building_space "Recurring: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_per_support = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_support "Personnel: Support (SI)" 
{txt}
{com}.                 
.                 gen si_per_mixed_unspec = . 
{txt}(2 missing values generated)

{com}.                 label var si_per_mixed_unspec "Personnel: Mixed Unspecified (SI)"
{txt}
{com}. 
.                 gen si_capital = . 
{txt}(2 missing values generated)

{com}.                 label var si_capital "Capital (SI)"
{txt}
{com}.                 
.                 gen si_cap_other = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_other "Capital: Other (SI)"
{txt}
{com}.                 
.                 gen si_cap_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_mixed "Capital: Mixed (SI)"
{txt}
{com}.                 
.                 gen si_cap_med_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_med_equip "Capital: Equipment (medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_nonmed_equip = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_nonmed_equip "Capital: Equipment (non-medical) (SI)"
{txt}
{com}.                 
.                 gen si_cap_building_space = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_building_space "Capital: Building Space (SI)"
{txt}
{com}.                 
.                 gen si_cap_vehicles = . 
{txt}(2 missing values generated)

{com}.                 label var si_cap_vehicles "Capital: Vehicles (SI)"
{txt}
{com}.                 
.                 gen si_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var si_mixed "Mixed (SI)"
{txt}
{com}.                 
.                 gen si_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var si_unspecified "Unspecified (SI)"
{txt}
{com}.                 
.                 gen a_prisd_unspec_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_unspec_counseling "Primary SD: Counseling unspecified (A)"
{txt}
{com}.                 
.                 gen a_prisd_post_test_counseling = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_post_test_counseling "Primary SD: Post-test counseling (A)"
{txt}
{com}.                 
.                 gen a_prisd_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_lab_services "Primary SD: Lab services (A)"
{txt}
{com}.                 
.                 gen a_prisd_htc_service_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_htc_service_delivery "Primary SD: HTC service delivery (A)"
{txt}
{com}.                 
.                 gen a_prisd_hiv_rapid_test = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_hiv_rapid_test "Primary SD: HIV rapid testing (A)"
{txt}
{com}.                 
.                 gen a_prisd_arv_delivery = . 
{txt}(2 missing values generated)

{com}.                 label var a_prisd_arv_delivery "Primary SD: ARV delivery"
{txt}
{com}.                 
.                 gen a_anc_adhreten = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_adhreten "Ancillary: Adherence/Retention (A)" 
{txt}
{com}.                 
.                 gen a_anc_lab_services = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_lab_services "Ancillary: Lab Services (A)"
{txt}
{com}.                 
.                 gen a_ancillary = . 
{txt}(2 missing values generated)

{com}.                 label var a_ancillary "Ancillary (A)"
{txt}
{com}.                 
.                 gen a_anc_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_unspecified "Ancillary: Unspecified (A)"
{txt}
{com}.                 
.                 gen a_anc_demand_generation = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_demand_generation "Ancillary: Demand generation (A)"
{txt}
{com}.                 
.                 gen a_anc_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_anc_bldg_equip "Ancillary: Building equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_training = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_training "Operational: Training (A)"
{txt}
{com}.                 
.                 gen a_ope_program_mgmt = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_program_mgmt "Operational: Program Management (A)"
{txt}
{com}.                 
.                 gen a_ope_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_bldg_equip "Operational: Buildings and Equipment (A)"
{txt}
{com}.                 
.                 gen a_ope_logistics = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_logistics "Operational: Logistics (A)"
{txt}
{com}.                 
.                 gen a_ope_supervision = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_supervision "Operational: Supervision (A)"
{txt}
{com}.                 
.                 gen a_ope_massed = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_massed "Operational: Mass Education (A)" 
{txt}
{com}.                 
.                 gen a_ope_hmis = . 
{txt}(2 missing values generated)

{com}.                 label var a_ope_hmis "Operational: HMIS and Record-Keeping (A)"
{txt}
{com}.                 
.                 gen a_secondary_sd = . 
{txt}(2 missing values generated)

{com}.                 label var a_secondary_sd "Secondary Service Delivery (A)"
{txt}
{com}.                         
.                 gen a_mixed = . 
{txt}(2 missing values generated)

{com}.                 label var a_mixed "Mixed (A)"
{txt}
{com}.                 
.                 gen a_mix_bldg_equip = . 
{txt}(2 missing values generated)

{com}.                 label var a_mix_bldg_equip "Mixed: Building Equipment (A)"
{txt}
{com}.                 
.                 gen a_unspecified = . 
{txt}(2 missing values generated)

{com}.                 label var a_unspecified "Unspecified (A)" 
{txt}
{com}. 
. 
.                 
.         * And for the collapse: 
.                 *Generate a variable to tell collapsed costs from full costs
.                 gen collapsed=0
{txt}
{com}.                 * Need to create an id without (a) for grouping collapse
.                 gen study=substr(id, 1, length(id)-1)
{txt}
{com}.                 
.                                 label variable study "Study"
{txt}
{com}.                                 label variable collapsed "Collapsed"
{txt}
{com}.                                 
.                                 label define collapsed 0 "No" 1 "Yes"
{txt}
{com}.                                 label values collapsed collapsed
{txt}
{com}.                 
.                 *Create a caveats variable 
.                                         //gen flags="." 
.                                         
. 
. **************************************************************************              
. ** Replace N/A, NR and none with missing
. **************************************************************************      
. 
. local to_decode "disease collapsed output_unit2 pop_density ownership platform facility_cat id_class id_int method id_tech pop_sex tb_rx_resistance timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls econ_perspective_actual econ_costing real_world asd_costs sensitivity_analysis scale research_costs unrelated_costs overhead volunteer_time family_time px_costs_measured cat_cost iso_code currency_iso currency_x inflation" 
{txt}
{com}. 
. foreach var of local to_decode {c -(} 
{txt}  2{com}.         decode `var', gen(`var'_new) 
{txt}  3{com}.         drop `var'
{txt}  4{com}.         rename `var'_new `var' 
{txt}  5{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  6{com}.         
.         replace `var' = strproper(`var')
{txt}  7{com}. {c )-}
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(0 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(0 real changes made)
(2 real changes made)
{res}{txt}(2 real changes made)
(0 real changes made)

{com}. 
. foreach var of varlist clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals id_activities list_asd_cost overhead_costs {c -(} 
{txt}  2{com}.         
.         replace `var' = "." if `var' == "N/A" | `var' == "NR" | `var' == "NA" | `var' == "" | `var' == " "
{txt}  3{com}.         
.         replace `var' = strproper(`var')
{txt}  4{com}. 
. {c )-}
{txt}(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)

{com}. 
.   
. replace disease = strupper(disease) 
{txt}(2 real changes made)

{com}. replace id_int = strupper(id_int) 
{txt}(2 real changes made)

{com}. replace iso_code = strupper(iso_code)
{txt}(2 real changes made)

{com}. replace currency_iso = strupper(currency_iso)
{txt}(2 real changes made)

{com}. replace pot_distortions = strupper(pot_distortions)
{txt}(0 real changes made)

{com}. 
. 
. 
. ****************************************************************************            
. ** Cross-validation of costed activities and intervention details columns **
. ****************************************************************************
. 
.         gen flag = 1 if regexm(id_activities, "HTC") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_1 = 1 if regexm(id_activities, "ARV") & arv_regimen == "."
{txt}(2 missing values generated)

{com}.         gen flag_2 = 1 if regexm(id_activities, "ARV") & treatment == "."
{txt}(2 missing values generated)

{com}.         gen flag_3 = 1 if regexm(id_activities, "counsel") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_4 = 1 if regexm(id_activities, "VCT") & counseling_content == "."
{txt}(2 missing values generated)

{com}.         gen flag_5 = 1 if regexm(id_activities, "CD4") & clinical_monitoring == "." 
{txt}(2 missing values generated)

{com}.         gen flag_6 = 1 if regexm(id_activities, "iagnosis") & clinical_monitoring == "."
{txt}(2 missing values generated)

{com}.         
.         
.         local varlist cost_activities "clinical_monitoring demand_generation counseling_content supportive_care referrals arv_regimen screening_diagnoses treatment community_awareness health_system id_tech" 
{txt}
{com}.         
.         gen supportive_care_flag = 1 if regexm(id_activities, "Supportive") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(2 missing values generated)

{com}.         replace supportive_care_flag = 1 if regexm(id_activities, "support") & (supportive_care == "." | supportive_care == "N/A" | supportive_care == "NR")
{txt}(0 real changes made)

{com}.         replace supportive_care_flag = 1 if supportive_care != "." & !(strmatch(id_activities, "*upport*"))
{txt}(0 real changes made)

{com}.         
.         gen clinical_mo_flag = 1 if regexm(id_activities, "CD4|iagnosis") & (clinical_monitoring == "." | clinical_monitoring == "N/A" | clinical_monitoring == "NR")
{txt}(2 missing values generated)

{com}.         replace clinical_mo_flag = 1 if clinical_monitoring != "." & (!(strmatch(id_activities, "*CD4*")) & !(strmatch(id_activities, "*iagnosis*")))
{txt}(0 real changes made)

{com}.         
.         gen counsel_flag = 1 if regexm(id_activities, "ounsel|VCT") & (counseling_content == "." | counseling_content == "N/A" | counseling_content == "NR")
{txt}(2 missing values generated)

{com}.         replace counsel_flag = 1 if counseling_content != "." & !(strmatch(id_activities, "*ounsel*"))
{txt}(0 real changes made)

{com}.         
.         gen demand_gen_flag = 1 if regexm(id_activities, "emand|generation") & (demand_generation == "." | demand_generation == "N/A" | demand_generation == "NR")
{txt}(2 missing values generated)

{com}.         replace demand_gen_flag = 1 if demand_generation != "." & demand_generation != "None" & !(strmatch(id_activities, "*eneration*"))
{txt}(0 real changes made)

{com}.         
.         gen referrals_flag = 1 if regexm(id_activities, "eferrals") & (referrals == "." | referrals == "N/A" | referrals == "NR")
{txt}(2 missing values generated)

{com}.         replace referrals_flag = 1 if referrals != "." & !(strmatch(id_activities, "*eferrals*"))
{txt}(0 real changes made)

{com}.         
.         gen arv_regimen_flag = 1 if regexm(id_activities, "ARV") & (arv_regimen == "." | arv_regimen == "N/A" | arv_regimen == "NR")
{txt}(2 missing values generated)

{com}.         replace arv_regimen_flag = 1 if arv_regimen != "." & arv_regimen != "N/A" & arv_regimen != "NR" & (!(strmatch(id_activities, "*ARV*")) & !(strmatch(id_activities, "*Arv*")))
{txt}(0 real changes made)

{com}.         
.         gen screen_diag_flag = 1 if regexm(id_activities, "iagnoses") & (screening_diagnoses == "." | screening_diagnoses == "N/A" | screening_diagnoses == "NR")
{txt}(2 missing values generated)

{com}.         
.         replace screen_diag_flag = 1 if screening_diagnoses != "." & screening_diagnoses != "NA" & screening_diagnoses != "NR" & !(strmatch(id_activities, "*iagno*"))
{txt}(0 real changes made)

{com}.         
.         gen treatment_flag = 1 if regexm(id_activities, "reatment") & (treatment == "." | treatment == "N/A" | treatment == "NR") 
{txt}(2 missing values generated)

{com}.         replace treatment_flag = 1 if treatment != "." & treatment != "N/A" & treatment != "NR" & !(strmatch(id_activities, "*reatment*"))
{txt}(0 real changes made)

{com}.         
.         gen comm_awareness_flag = 1 if regexm(id_activities, "wareness") & (community_awareness == "." | community_awareness == "N/A" | community_awareness == "NR") 
{txt}(2 missing values generated)

{com}.         replace comm_awareness_flag = 1 if community_awareness != "." & community_awareness != "N/A" & community_awareness != "NR" & community_awareness != "None" & !(strmatch(id_activities, "*wareness*"))
{txt}(0 real changes made)

{com}.         
.         gen health_system_flag = 1 if regexm(id_activities, "system") & (health_system == "." | health_system == "N/A" | health_system == "NR") 
{txt}(2 missing values generated)

{com}.         replace health_system_flag = 1 if health_system != "." & health_system != "N/A" & health_system != "NR" & !(strmatch(id_activities, "*ystem*"))
{txt}(0 real changes made)

{com}.         
. 
. 
. **************************************************************************              
. ** Order variables 
. **************************************************************************              
. 
. order disease collapsed lead_author ref_year output_unit2 ref_year title journal_etc url /// 
> iso_name location no_sites pop_density ownership platform facility_cat id_class id_int int_description_long /// 
> clinical_monitoring demand_generation counseling_content staff_type supportive_care visits referrals method id_tech /// 
> treatment_phase arv_regimen treatment screening_diagnoses community_awareness health_system id_activities /// 
> start_month start_year end_month end_year period_portrayed year_intro coverage /// 
> id_pop_dem_std id_pop_clin_std pop_age pop_sex pop_ses pop_education hiv_prev tb_prev tb_rx_resistance /// 
> costing_purpose timing country_sampling geo_sampling_incountry site_sampling px_sampling sample_size_derived controls /// 
> econ_perspective_actual econ_costing real_world asd_costs list_asd_costs omitted_costs sensitivity_analysis scale /// 
> research_costs unrelated_costs overhead overhead_costs pot_distortions /// 
> volunteer_time family_time px_costs_measured cat_cost currency_yr iso_code currency_iso currency_x current_x_rate discount_rate inflation /// 
> mean_cost si_personnel si_per_service_delivery si_per_support si_per_mixed_unspec /// 
> si_recurrent si_rec_key_drugs si_rec_med_int_supplies si_rec_nonmed_int_supplies si_rec_building_space si_rec_mixed si_rec_other /// 
> si_capital si_cap_med_equip si_cap_nonmed_equip si_cap_build si_cap_vehic si_cap_mixed si_cap_other si_mixed si_unspecified /// 
> a_primary_sd  a_prisd_unspecified a_prisd_unspec_counseling a_prisd_post_test_counseling a_prisd_lab_services a_prisd_htc_service_delivery a_prisd_hiv_rapid_test a_prisd_arv_delivery /// 
> a_secondary_sd a_ancillary /// 
> a_anc_demand_generation a_anc_lab_services a_anc_adhreten a_anc_bldg_equip a_anc_unspecified /// 
> a_operational a_ope_bldg_equip a_ope_logistics a_ope_program_mgmt a_ope_supervision a_ope_training a_ope_transportation a_ope_massed a_ope_hmis a_ope_unspecified a_mixed a_mix_bldg_equip a_unspecified
{txt}
{com}. 
. 
. // only keep relevant variables 
. keep disease-a_unspecified
{txt}
{com}. 
. 
. // identify string variables in the dataset and make sure that missings are all formatted homogenously
. 
. ds, has(type string) 
{txt}{col 1}disease{col 15}id_int{col 29}screening_~s{col 43}country_sa~g{col 57}research_c~s
{col 1}collapsed{col 15}int_descri~g{col 29}community_~s{col 43}geo_sampli~y{col 57}unrelated_~s
{col 1}lead_author{col 15}clinical_m~g{col 29}health_sys~m{col 43}site_sampl~g{col 57}overhead
{col 1}output_unit2{col 15}demand_gen~n{col 29}id_activit~s{col 43}px_sampling{col 57}overhead_c~s
{col 1}title{col 15}counseling~t{col 29}id_pop_dem~d{col 43}sample_siz~d{col 57}pot_distor~s
{col 1}journal_etc{col 15}staff_type{col 29}id_pop_cli~d{col 43}controls{col 57}volunteer_~e
{col 1}url{col 15}supportive~e{col 29}pop_age{col 43}econ_persp~l{col 57}family_time
{col 1}iso_name{col 15}visits{col 29}pop_sex{col 43}econ_costing{col 57}px_costs_m~d
{col 1}location{col 15}referrals{col 29}pop_ses{col 43}real_world{col 57}cat_cost
{col 1}pop_density{col 15}method{col 29}pop_educat~n{col 43}asd_costs{col 57}iso_code
{col 1}ownership{col 15}id_tech{col 29}tb_prev{col 43}list_asd_c~s{col 57}currency_iso
{col 1}platform{col 15}treatment_~e{col 29}tb_rx_resi~e{col 43}omitted_co~s{col 57}currency_x
{col 1}facility_cat{col 15}arv_regimen{col 29}costing_pu~e{col 43}sensitivit~s{col 57}inflation
{col 1}id_class{col 15}treatment{col 29}timing{col 43}scale

{com}. local strvars "`r(varlist)'"
{txt}
{com}. 
. foreach var of local strvars {c -(} 
{txt}  2{com}.         replace `var' = "." if `var' == "NA" | `var' == "N/A" | `var' == "NR" | `var' == " " | `var' == ""
{txt}  3{com}. {c )-}
{txt}(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(2 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)
(0 real changes made)

{com}. 
. 
. * Finally, export!
. **************************
. save pat_tracking_clean_wide_file_Mar2018.dta, replace
{txt}(note: file pat_tracking_clean_wide_file_Mar2018.dta not found)
file pat_tracking_clean_wide_file_Mar2018.dta saved

{com}. 
. * Drew's Path
. //export excel using wide_files/UCSR_export_full.xlsx, first(varl) missing(".") replace
. 
. * Lily's Path
. * export excel using UCSR_exports/UCSR_export_full.xlsx, first(varl) missing(".") replace       
. 
. 
. 
. 
{txt}end of do-file

{com}. do "/var/folders/0y/5bmlgxmx39v_fqw0vs5vrp680000gn/T//SD00256.000000"
{txt}
{com}. 
. /********************************************
> Patient Tracking Data Check 
> Author: Lily Alexander
> Date created: April 6, 2018
> Last updated: April 6, 2018
> *********************************************/
. 
. 
. //-------------------------------
. 
. /* ----------------------- 
> Environment Setup
> --------------------------
> */
. 
. log close _all
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/lilyalexander/Dropbox/ALL LIFE THINGS/INSP/Work with Sergio/GHCC/Post-Extraction-Processing/HCT/checks/data_check.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res} 7 Apr 2018, 23:04:24
{txt}{.-}
{smcl}
{txt}{sf}{ul off}